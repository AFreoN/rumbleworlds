{"version":3,"sources":["assets/home/characters/solarmy_nonTex.glb","assets/home/characters/Textures/solarmy_diffuse512.png","assets/home/characters/solien_nonTex.glb","assets/home/characters/Textures/solien_diffuse512.png","assets/home/characters/sunk_nonTex.glb","assets/home/characters/Textures/sunk_diffuse512.png","assets/home/characters/rumbler_tex512.glb","assets/home/characters/solarian_nonTex.glb","assets/home/characters/Textures/solarian_diffuse512.jpg","assets/home/characters/Solarmy_MetalRoughMap.png","assets/home/characters/Sunk_MetalRoughness.png","components/Home/Characters/Characters.jsx"],"names":["camera","mixers","manager","THREE","gltfloader","GLTFLoader","textureLoader","clock","renderer","alpha","composer","setClearColor","selectedObjects","scene","solarmy","solien","sunk","rumbler","solarian","characterList","isPostProcessEnabled","loadedCount","modelsLoaded","firstFrameRendered","mLoaded","domElement","style","display","console","log","toneMapping","toneMappingExposure","shadowMap","enabled","fog","background","hemiLight","position","set","multiplyScalar","dirLight","color","setHSL","d","castShadow","shadow","top","bottom","left","right","far","bias","add","rimPointLight","ambientLight","load","rumblerModel","object","mixer","clipAction","animations","play","push","traverse","child","isMesh","receiveShadow","x","y","rotation","scale","solarmyModel","action","solarmyLoadManager","solarmyTexLoader","diffuseTexture","roughmetalTexture","Solarmy_metalroughness_texture","texture","flipY","needsUpdate","solarmyDiffuse","encoding","onLoad","material","roughness","metalness","metalnessMap","roughnessMap","map","name","solienModel","solienDiffuse","Math","PI","sunkModel","sunkLoadManager","sunkTexLoader1","sunkTexLoader2","sunkRoughnessTexture","sunkDiffuseTexture","Sunk_metalroughness_texture","sunkDiffuse","degToRad","solarianModel","diffuseMap","solarianDiffuse","setupScene","Characters","character","useSelector","state","characterSelect","ref","useRef","useEffect","current","width","clientWidth","height","clientHeight","setSize","appendChild","params","EffectComposer","renderPass","RenderPass","addPass","outlinePass","OutlinePass","edgeStrength","edgeGlow","edgeThickness","visibleEdgeColor","hiddenEdgeColor","setupPostProcessing","remove","animate","requestAnimationFrame","el","rect","getBoundingClientRect","elemTop","elemBottom","window","innerHeight","isScrolledIntoView","doc","delta","getDelta","i","length","update","render","document","getElementById","handleResize","aspect","updateProjectionMatrix","addEventListener","removeEventListener","removeChild","_jsx","className"],"mappings":"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","file":"static/js/4.d9372273.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/solarmy_nonTex.b04c5e96.glb\";","export default __webpack_public_path__ + \"static/media/solarmy_diffuse512.3064f037.png\";","export default __webpack_public_path__ + \"static/media/solien_nonTex.f92e0c2c.glb\";","export default __webpack_public_path__ + \"static/media/solien_diffuse512.a226f1cf.png\";","export default __webpack_public_path__ + \"static/media/sunk_nonTex.abd31909.glb\";","export default __webpack_public_path__ + \"static/media/sunk_diffuse512.720afcef.png\";","export default __webpack_public_path__ + \"static/media/rumbler_tex512.bf353b66.glb\";","export default __webpack_public_path__ + \"static/media/solarian_nonTex.b4d78b28.glb\";","export default __webpack_public_path__ + \"static/media/solarian_diffuse512.6eb047ab.jpg\";","export default __webpack_public_path__ + \"static/media/Solarmy_MetalRoughMap.df706793.png\";","export default __webpack_public_path__ + \"static/media/Sunk_MetalRoughness.553a66d4.png\";","import { useRef, useEffect } from \"react\";\r\nimport * as THREE from \"three\";\r\n// import { FBXLoader } from \"three/examples/jsm/loaders/FBXLoader.js\";\r\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader.js\";\r\n\r\nimport solarmyModel from \"assets/home/characters/solarmy_nonTex.glb\";\r\nimport solarmyDiffuse from \"assets/home/characters/Textures/solarmy_diffuse512.png\";\r\n\r\nimport solienModel from \"assets/home/characters/solien_nonTex.glb\";\r\nimport solienDiffuse from \"assets/home/characters/Textures/solien_diffuse512.png\";\r\n\r\nimport sunkModel from \"assets/home/characters/sunk_nonTex.glb\";\r\nimport sunkDiffuse from \"assets/home/characters/Textures/sunk_diffuse512.png\";\r\n// import rumblerModel from \"assets/home/characters/rumbler.glb\";\r\n// import rumblerModel from \"assets/home/characters/rumbler_cyclops_2048.glb\";\r\n// import rumblerModel from \"assets/home/characters/rumbler_cyclops_1024.glb\";\r\n// import rumblerModel from \"assets/home/characters/rumbler_cyclops_1024_512acc.glb\";\r\nimport rumblerModel from \"assets/home/characters/rumbler_tex512.glb\"; //rumbler_cyclops_256yellow_512all.glb\r\n\r\nimport solarianModel from \"assets/home/characters/solarian_nonTex.glb\";  //solarian.glb\r\nimport solarianDiffuse from \"assets/home/characters/Textures/solarian_diffuse512.jpg\"\r\n\r\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';\r\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';\r\nimport { OutlinePass } from 'three/examples/jsm/postprocessing/OutlinePass.js';\r\n// import { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass.js';\r\n// import { FXAAShader } from 'three/examples/jsm/shaders/FXAAShader.js';\r\n\r\n// import solarmy_texture from \"assets/home/characters/solarmy_texture.png\";\r\nimport Solarmy_metalroughness_texture from \"assets/home/characters/Solarmy_MetalRoughMap.png\";\r\nimport Sunk_metalroughness_texture from \"assets/home/characters/Sunk_MetalRoughness.png\";\r\n// import solien_texture from \"assets/home/characters/solien_texture.png\";\r\n// import sunk_texture from \"assets/home/characters/sunk_texture.png\";\r\nimport \"./characters.scss\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nlet mixers = [];\r\nlet camera;\r\nconst manager = new THREE.LoadingManager();\r\n// load model\r\n//const loader = new FBXLoader(manager);\r\nconst gltfloader = new GLTFLoader(manager);\r\nconst textureLoader = new THREE.TextureLoader(manager);\r\n\r\nconst clock = new THREE.Clock();\r\n\r\nconst renderer = new THREE.WebGLRenderer({ alpha: true });\r\nrenderer.setClearColor(0x000000, 0);\r\n\r\nvar composer;\r\nvar selectedObjects  = [];\r\n\r\nlet scene;\r\nlet characterList = [];\r\nlet solarmy, solien, sunk, rumbler, solarian;\r\n\r\nvar isPostProcessEnabled = false;\r\nconst characterCount = 5;\r\nvar loadedCount = 0;\r\nvar modelsLoaded = false;\r\nexport var firstFrameRendered = false;\r\n\r\nfunction setupScene(){\r\n  scene = new THREE.Scene();\r\n\r\n    //   camera.position.multiplyScalar(30);\r\n  //   camera.rotation.set(50, 0, 0);\r\n  renderer.toneMapping = THREE.ReinhardToneMapping;\r\n  renderer.toneMappingExposure = 1;\r\n  renderer.shadowMap.enabled = true;\r\n  // renderer.outputEncoding = THREE.sRGBEncoding;\r\n  // renderer.setClearColor(0xffffff, 0);\r\n  // scene.background = new THREE.Color(0x999999);\r\n  // scene.background = new THREE.Color().setHSL(0.6, 0, 1);\r\n\r\n  // document.body.appendChild( renderer.domElement );\r\n  // use ref as a mount point of the Three.js scene instead of the document.body\r\n\r\n  // add light\r\n  // scene.fog = new THREE.Fog(0xa0a0a0, 1, 2000);\r\n  scene.fog = new THREE.Fog(scene.background, 1, 20000);\r\n  const hemiLight = new THREE.HemisphereLight(0xffffff, 0x444444, 1);\r\n  hemiLight.position.set(0, 2, 0);\r\n  hemiLight.position.multiplyScalar(1000000);\r\n  // hemiLight.color.setHSL(0.6, 0.6, 0.6);\r\n  // hemiLight.groundColor.setHSL(0.095, 1, 0.75);\r\n  //scene.add(hemiLight);\r\n  // add to show light helper\r\n\r\n  const dirLight = new THREE.DirectionalLight(0xFFF6B6, 10);   //prev 1.5 in default tone mapping\r\n  dirLight.color.setHSL(0.1, 1, 0.95);\r\n  dirLight.position.multiplyScalar(30);\r\n  const d = 200;\r\n  dirLight.position.set(-2, 2, 4);   //prev (1, 2, 1)\r\n  dirLight.position.multiplyScalar(1000);\r\n  dirLight.castShadow = true;\r\n  dirLight.shadow.camera.top = d;\r\n  dirLight.shadow.camera.bottom = -d;\r\n  dirLight.shadow.camera.left = -d;\r\n  dirLight.shadow.camera.right = d;\r\n  // dirLight.shadow.camera.near = 0.1;\r\n  // dirLight.shadow.camera.far = 100;\r\n  dirLight.shadow.camera.far = 35000;\r\n  dirLight.shadow.bias = -0.0001;\r\n  scene.add(dirLight);\r\n  \r\n  const spotLight = new THREE.SpotLight( 0xaa0000 );\r\n  spotLight.position.set( -10, 10, -5 );\r\n  //scene.add( spotLight );\r\n\r\n  // const redPointLightRadius = 15;   //5\r\n  // const redpointLight = new THREE.PointLight( 0xff0000, redPointLightRadius , 40 );\r\n  // redpointLight.position.set( -7, 1, -1 );\r\n  // scene.add( redpointLight );\r\n\r\n  const rimLightSize = 30;   //8\r\n  const rimPointLight = new THREE.PointLight( 0x0033FF, rimLightSize, 40);\r\n  rimPointLight.position.set( 10, 2, 0);\r\n  scene.add( rimPointLight );\r\n\r\n  const ambientLight = new THREE.AmbientLight( 0xffffff, 0 ); // soft white light\r\n  scene.add( ambientLight );\r\n\r\n  renderer.domElement.style.display = \"none\";\r\n  // add to show light helper\r\n  // const dirLightHelper = new THREE.DirectionalLightHelper(dirLight, 10);\r\n  // scene.add(dirLightHelper);\r\n  // const groundGeo = new THREE.PlaneGeometry(100000, 100000);\r\n  // const groundMat = new THREE.MeshLambertMaterial({ color: 0xffffff });\r\n  // groundMat.color.setHSL(0.095, 1, 0.75);\r\n  // const ground = new THREE.Mesh(groundGeo, groundMat);\r\n  // ground.rotation.x = -Math.PI / 2;\r\n  // ground.receiveShadow = true;\r\n  // scene.add(ground);\r\n  LoadModels();\r\n}\r\n\r\nfunction setupPostProcessing(width, height){\r\n  if(isPostProcessEnabled){\r\n    return;\r\n  }\r\n\r\n  const params = {\r\n    edgeStrength: 5.0,  //3\r\n    edgeGlow: 0.0,  //0\r\n    edgeThickness: 1.0, //1\r\n    pulsePeriod: 0,\r\n    rotate: false,\r\n    usePatternTexture: false\r\n  };\r\n\r\n  composer = new EffectComposer( renderer );\r\n\r\n\tconst renderPass = new RenderPass( scene, camera );\r\n\tcomposer.addPass( renderPass );\r\n\r\n\tconst outlinePass = new OutlinePass( new THREE.Vector2( width, height ), scene, camera );\r\n  outlinePass.edgeStrength = params.edgeStrength;\r\n  outlinePass.edgeGlow = params.edgeGlow;\r\n  outlinePass.edgeThickness = params.edgeThickness;\r\n  outlinePass.visibleEdgeColor.set(0x000000);\r\n  outlinePass.hiddenEdgeColor.set(0x111111);\r\n  outlinePass.selectedObjects = selectedObjects;\r\n\tcomposer.addPass( outlinePass );\r\n\r\n  isPostProcessEnabled = true;\r\n}\r\n\r\nfunction LoadModels(){\r\n  \r\n  gltfloader.load(rumblerModel, function (object) {\r\n    rumbler = object.scene;\r\n    // console.log(\"rumbler loaded\");\r\n    const mixer = new THREE.AnimationMixer(rumbler);\r\n    const action = mixer.clipAction(object.animations[0]);\r\n    action.play();\r\n    mixers.push(mixer);\r\n    selectedObjects.push(rumbler);\r\n\r\n    rumbler.traverse((child) => {\r\n      if(child.isMesh){\r\n        child.castShadow = true;\r\n        child.receiveShadow = true;\r\n      }\r\n    });\r\n    // selectedObjects.traverse((obj) => {\r\n    //   console.log('traversed properly');\r\n    // })\r\n    // const tgaLoader = new TGALoader(manager);\r\n\r\n    // const texture1 = tgaLoader.load(rumbler_cyclops_base_color);\r\n    // const texture2 = tgaLoader.load(rumbler_cyclops_texture);\r\n\r\n    // rumbler.traverse(function (child) {\r\n    //   if (child.isMesh) {\r\n    //     child.castShadow = true;\r\n    //     child.receiveShadow = true;\r\n    //     child.material.map = texture1;\r\n    //     child.material.needsUpdate = true;\r\n\r\n    //     if (\r\n    //       child.name.includes(\"Metal\") ||\r\n    //       child.name.includes(\"Armor\") ||\r\n    //       child.name.includes(\"Thumb\") ||\r\n    //       child.name.includes(\"ShoulderPad\") ||\r\n    //       child.name.includes(\"Index\") ||\r\n    //       child.name.includes(\"Pinky\")\r\n    //     ) {\r\n    //       var x = child.material.clone();\r\n    //       x.map = texture2;\r\n    //       x.needsUpdate = true;\r\n    //       child.material = x;\r\n    //     }\r\n    //   }\r\n    // });\r\n\r\n    // rumbler.rotation.set(0, -50, 0);\r\n    // rumbler.rotation.set(0, 1, 0);\r\n    rumbler.position.x = -0.5;\r\n    rumbler.position.y = -1.25;\r\n    rumbler.rotation.y = 0.3;\r\n    rumbler.scale.set(13, 13, 13);  //prev 11\r\n    // rumbler.visible = false; \r\n\r\n    scene.add(rumbler);\r\n    characterList.push(rumbler);\r\n    mLoaded();\r\n  });\r\n  \r\n  LoadRemainingModels();\r\n}\r\nfunction LoadRemainingModels(){\r\n  \r\n  gltfloader.load(solarmyModel, function (object) {\r\n    solarmy = object.scene;\r\n    // console.log('solarmy loaded');\r\n    const mixer = new THREE.AnimationMixer(solarmy);\r\n    const action = mixer.clipAction(object.animations[0]);\r\n    mixers.push(mixer);\r\n    action.play();\r\n    selectedObjects.push(solarmy);\r\n\r\n    const solarmyLoadManager = new THREE.LoadingManager();\r\n    const solarmyTexLoader = new THREE.TextureLoader(solarmyLoadManager);\r\n    // const solarmyTexLoader2 = new THREE.TextureLoader(solarmyLoadManager);\r\n    var diffuseTexture, roughmetalTexture;\r\n\r\n    solarmyTexLoader.load(Solarmy_metalroughness_texture, (texture) => {\r\n      texture.flipY = false;\r\n      texture.needsUpdate = true;\r\n      roughmetalTexture = texture;\r\n    });\r\n    \r\n    solarmyTexLoader.load(solarmyDiffuse, (texture) => {\r\n      texture.flipY = false;\r\n      texture.encoding = THREE.sRGBEncoding;\r\n      texture.needsUpdate = true;\r\n      diffuseTexture = texture;\r\n    })\r\n\r\n    solarmyLoadManager.onLoad = () => {\r\n\r\n      solarmy.traverse(function (child) {\r\n        if (child.isMesh) {\r\n          child.castShadow = true;\r\n          child.receiveShadow = true;\r\n          // child.material.roughness = 0;\r\n          child.material.roughness = 0.9;\r\n          child.material.metalness = 1;\r\n          child.material.metalnessMap = roughmetalTexture;\r\n          child.material.roughnessMap = roughmetalTexture;\r\n          child.material.map = diffuseTexture;\r\n          child.material.needsUpdate = true;\r\n\r\n          // textureLoader.load(Solarmy_metalroughness_texture, (texture) => {\r\n          //   texture.flipY = false;\r\n          //   texture.needsUpdate = true;\r\n          //   child.material.metalnessMap = texture;\r\n          //   child.material.roughnessMap = texture;\r\n          //   child.material.needsUpdate = true;\r\n          // });\r\n          // textureLoader.load(solarmyDiffuse, (texture) => {\r\n          //   texture.flipY = false;\r\n          //   texture.encoding = THREE.sRGBEncoding;\r\n          //   texture.needsUpdate = true;\r\n          //   child.material.map = texture;\r\n          //   child.material.needsUpdate = true;\r\n          // })\r\n        }\r\n      });\r\n\r\n      mLoaded();\r\n    }\r\n\r\n\r\n    solarmy.position.set(-0.5, -1.5, 0);\r\n\r\n    solarmy.rotation.set(0, 0, 0);\r\n    solarmy.scale.set(3.6, 3.6, 3.6); //prev 3\r\n\r\n    solarmy.name = \"solarmy\";\r\n\r\n    characterList.push(solarmy);\r\n  });\r\n\r\n  gltfloader.load(solienModel, function (object) {\r\n    solien = object.scene;\r\n    // console.log('solien loaded');\r\n    const mixer = new THREE.AnimationMixer(solien);\r\n    const action = mixer.clipAction(object.animations[0]);\r\n    action.play();\r\n    mixers.push(mixer);\r\n    selectedObjects.push(solien);\r\n\r\n    textureLoader.load(solienDiffuse, (texture) => {\r\n      texture.flipY = false;\r\n      texture.encoding = THREE.sRGBEncoding;\r\n\r\n      solien.traverse(function (child) {\r\n        if (child.isMesh) {\r\n          child.castShadow = true;\r\n          child.receiveShadow = true;\r\n          child.material.roughness = 0.7;\r\n          child.material.metalness = 0.1;\r\n          child.material.map = texture;\r\n          child.material.needsUpdate = true;\r\n        }\r\n      });\r\n      // child.material.side = THREE.DoubleSide;\r\n      // child.material.dithering = true;\r\n      mLoaded();\r\n    });\r\n\r\n    solien.position.set(-0.5, -1.5, -0.6);  //prev (0, 0.5, -0.6)\r\n    solien.rotation.set(0, Math.PI * 0.25, 0);\r\n    solien.scale.set(2, 2, 2);    //prev (1.6, 1.6, 1.6)\r\n    // solien.visible = false;\r\n\r\n    characterList.push(solien);\r\n  });\r\n  gltfloader.load(sunkModel, function (object) {\r\n    sunk = object.scene;\r\n    // console.log('sunk loaded');\r\n    const mixer = new THREE.AnimationMixer(sunk);\r\n    const action = mixer.clipAction(object.animations[0]);\r\n    action.play();\r\n    mixers.push(mixer);\r\n    selectedObjects.push(sunk);\r\n    \r\n    const sunkLoadManager = new THREE.LoadingManager();\r\n    const sunkTexLoader1 = new THREE.TextureLoader(sunkLoadManager);\r\n    const sunkTexLoader2 = new THREE.TextureLoader(sunkLoadManager);\r\n    var sunkRoughnessTexture, sunkDiffuseTexture;\r\n\r\n    sunkTexLoader1.load(Sunk_metalroughness_texture, (texture) => {\r\n      texture.flipY = false;\r\n      texture.encoding = THREE.sRGBEncoding;\r\n      texture.needsUpdate = true;\r\n      sunkRoughnessTexture = texture;\r\n    })\r\n\r\n    sunkTexLoader2.load(sunkDiffuse, (texture) => {\r\n      texture.flipY = false;\r\n      texture.encoding = THREE.sRGBEncoding;\r\n      texture.needsUpdate = true;\r\n      sunkDiffuseTexture = texture;\r\n    })\r\n\r\n    sunkLoadManager.onLoad= () => {\r\n\r\n      sunk.traverse(function (child) {\r\n        if(child.isMesh){\r\n          child.material.roughness = 0.9;\r\n          child.material.metalness = 0.7;\r\n\r\n          child.material.metalnessMap = sunkRoughnessTexture;\r\n          child.material.roughnessMap = sunkRoughnessTexture;\r\n          child.material.map = sunkDiffuseTexture;\r\n          child.material.needsUpdate = true;\r\n\r\n          // textureLoader.load(Sunk_metalroughness_texture, (texture) => {\r\n          //   texture.flipY = false;\r\n          //   texture.needsUpdate = true;\r\n          //   child.material.metalnessMap = texture;\r\n          //   child.material.roughnessMap = texture;\r\n          //   child.material.needsUpdate = true;\r\n          // });\r\n          // textureLoader.load(sunkDiffuse, (texture) => {\r\n          //   texture.flipY = false;\r\n          //   texture.encoding = THREE.sRGBEncoding;\r\n          //   child.material.map = texture;\r\n          //   child.material.needsUpdate = true;\r\n          // })\r\n        }\r\n      });\r\n\r\n      mLoaded();\r\n    }\r\n\r\n\r\n    // sunk.rotation.set(0, -50, 0);\r\n    sunk.rotation.set(THREE.MathUtils.degToRad(5), Math.PI * 0.1, 0);\r\n    sunk.position.set( -0.5, -2.7, -1.2);   //prev (0,-0.5,-1)\r\n    const scale = 1.2;  //1.2\r\n    sunk.scale.set(scale, scale, scale);    //prev (1.2, 1.2, 1.2)\r\n    // sunk.visible = false;\r\n\r\n    characterList.push(sunk);\r\n  });\r\n  \r\n  gltfloader.load(solarianModel, function (object) {\r\n    solarian = object.scene;\r\n    const mixer = new THREE.AnimationMixer(solarian);\r\n    const action = mixer.clipAction(object.animations[0]);\r\n    action.play();\r\n    mixers.push(mixer);\r\n    selectedObjects.push(solarian);\r\n    // console.log('solarian loaded');\r\n\r\n    var diffuseMap;\r\n    textureLoader.load(solarianDiffuse, (texture) => {\r\n      texture.flipY = false;\r\n      texture.encoding = THREE.sRGBEncoding;\r\n      texture.needsUpdate = true;\r\n      diffuseMap = texture;\r\n      solarian.traverse(function (child) {\r\n        if (child.isMesh) {\r\n          child.castShadow = true;\r\n          child.receiveShadow = true;\r\n          child.material.map = diffuseMap;\r\n          child.material.roughness = 0.4;\r\n          child.material.metalness = 0.2;\r\n          child.material.needsUpdate = true;\r\n          // textureLoader.load(solarian_texture, (texture) => {\r\n          //   child.material.map = texture;\r\n          //   child.material.needsUpdate = true;\r\n          // });\r\n        }\r\n      });\r\n      mLoaded();\r\n    })\r\n\r\n\r\n    // solarian.rotation.set(0, -50, 0);\r\n    solarian.rotation.set(0, 0.5, 0);   //prev (0, 0.5, 0)\r\n    solarian.position.x = -0.25;\r\n    solarian.position.y = -0.5;  //prev 0.7\r\n    solarian.scale.set(1.8, 1.8, 1.8);  //prev (2,2,2)\r\n    // solarian.visible = false;\r\n\r\n    characterList.push(solarian);\r\n  });\r\n}\r\nfunction mLoaded(){\r\n  loadedCount++;\r\n  if(loadedCount >= characterCount){\r\n    renderer.domElement.style.display = \"block\";\r\n    modelsLoaded = true;\r\n    console.log(\"All characters loaded\");\r\n    // setTimeout(() => {\r\n\r\n    //   console.log(\"Timeout completed\");\r\n    // }, 10000);\r\n    // // composer.render();\r\n  }\r\n}\r\nsetupScene();\r\n// function sleep(milliseconds) {\r\n//   const date = Date.now();\r\n//   let currentDate = null;\r\n//   do {\r\n//     currentDate = Date.now();\r\n//   } while (currentDate - date < milliseconds);\r\n// }\r\n// console.log(\"before sleep\");\r\n// sleep(10000);\r\n// console.log(\"after sleep\");\r\n\r\nfunction Characters() {\r\n  const character = useSelector((state) => state.characterSelect.character);\r\n  const ref = useRef();\r\n  \r\n  useEffect(() => {\r\n    const current = ref.current;\r\n    let width = current.clientWidth; // or window.innerWidth;\r\n    let height = current.clientHeight; // = window.innerHeight for full screen\r\n\r\n    const init = () => {\r\n      camera = new THREE.PerspectiveCamera(90, width/ height, 1, 100000);\r\n      camera.position.set(0, 2.5, 4);\r\n      renderer.setSize(width, height);\r\n      current.appendChild(renderer.domElement);\r\n\r\n      setupPostProcessing(width, height);\r\n\r\n      if(modelsLoaded === false)\r\n        return;\r\n\r\n      if (character === 0) {\r\n        scene.add(rumbler);\r\n        scene.remove(solarmy);\r\n        scene.remove(solien);\r\n        scene.remove(sunk);\r\n        scene.remove(solarian);\r\n      }\r\n      if (character === 1) {\r\n        scene.remove(rumbler);\r\n        scene.add(solarmy);\r\n        scene.remove(solien);\r\n        scene.remove(sunk);\r\n        scene.remove(solarian);\r\n      }\r\n      if (character === 2) {\r\n        scene.remove(rumbler);\r\n        scene.remove(solarmy);\r\n        scene.add(solien);\r\n        scene.remove(sunk);\r\n        scene.remove(solarian);\r\n      }\r\n      if (character === 3) {\r\n        scene.remove(rumbler);\r\n        scene.remove(solarmy);\r\n        scene.remove(solien);\r\n        scene.add(sunk);\r\n        scene.remove(solarian);\r\n      }\r\n      if (character === 4) {\r\n        scene.remove(rumbler);\r\n        scene.remove(solarmy);\r\n        scene.remove(solien);\r\n        scene.remove(sunk);\r\n        scene.add(solarian);\r\n      }\r\n    };\r\n\r\n    init();\r\n\r\n    manager.onLoad = () => {\r\n      console.log(\"Calling Render\");\r\n      animate();\r\n    };\r\n\r\n    // animate\r\n    const animate = function () {\r\n      requestAnimationFrame(animate);\r\n      // characterChange();\r\n\r\n      if(isScrolledIntoView(doc) && modelsLoaded){\r\n        const delta = clock.getDelta();\r\n        for (let i = 0; i < mixers.length; i++) {\r\n          mixers[i].update(delta);\r\n        }\r\n        render();\r\n      }\r\n      else if(firstFrameRendered === false){\r\n        const delta = clock.getDelta();\r\n        for (let i = 0; i < mixers.length; i++) {\r\n          mixers[i].update(delta);\r\n        }\r\n        render();\r\n      }\r\n    };\r\n\r\n    const doc = document.getElementById('character_model');\r\n\r\n    function isScrolledIntoView(el) {\r\n      var rect = el.getBoundingClientRect();\r\n      var elemTop = rect.top;\r\n      var elemBottom = rect.bottom;\r\n      var isVisible = elemTop < window.innerHeight && elemBottom >= 0;\r\n      return isVisible;\r\n    }\r\n\r\n    const render = () => {\r\n      //renderer.render(scene, camera);\r\n       composer.render();\r\n      if(!firstFrameRendered){\r\n        firstFrameRendered = true;\r\n        console.log(\"First frame rendered\");\r\n      }\r\n    };\r\n\r\n    const handleResize = () => {\r\n      width = ref.current.clientWidth;\r\n      height = ref.current.clientHeight;\r\n      // height = 500;\r\n      renderer.setSize(width, height);\r\n      camera.aspect = width / height;\r\n      camera.updateProjectionMatrix();\r\n      render();\r\n    };\r\n    //#region Old props code\r\n    // props.store.subscribe((data) => {\r\n    //   console.log(data.characterSelect.character);\r\n    //   if (currentCharIndex === data.characterSelect.character) {\r\n    //     console.log(\"Same character\");\r\n    //     return;\r\n    //   }\r\n\r\n    //   for (let i = 0; i < characterList.length; i++) {\r\n    //     characterList[i].visible = false;\r\n    //     if (i === data.characterSelect.character) {\r\n    //       console.log(\"Change character!\");\r\n    //       characterList[i].visible = true;\r\n    //       currentCharIndex = i;\r\n    //     }\r\n    //   }\r\n    // });\r\n\r\n    // const characterChange = () => {\r\n    //   console.log(character.character);\r\n    //   if (currentCharIndex === character.character) {\r\n    //     console.log(\"Same character\");\r\n    //     return;\r\n    //   }\r\n    //   for (let i = 0; i < characterList.length; i++) {\r\n    //     characterList[i].visible = false;\r\n    //     if (i === character.character) {\r\n    //       console.log(\"Change character!\");\r\n    //       characterList[i].visible = true;\r\n    //       currentCharIndex = i;\r\n    //     }\r\n    //   }\r\n    // };\r\n    //#endregion\r\n    \r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    return () => {\r\n      // Callback to cleanup three js, cancel animationFrame, etc\r\n\r\n      window.removeEventListener(\"resize\", handleResize);\r\n      current.removeChild(renderer.domElement);\r\n    };\r\n  }, [character]);\r\n \r\n  // console.log(\"returned character\");\r\n  return <div ref={ref} className=\"Characters\"></div>;\r\n}\r\n\r\nexport default Characters;\r\n"],"sourceRoot":""}