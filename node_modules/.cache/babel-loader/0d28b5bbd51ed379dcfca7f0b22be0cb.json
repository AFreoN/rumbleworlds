{"ast":null,"code":"import { AdditiveBlending, Color, DoubleSide, LinearFilter, Matrix4, MeshBasicMaterial, MeshDepthMaterial, NoBlending, RGBADepthPacking, RGBAFormat, ShaderMaterial, UniformsUtils, Vector2, Vector3, WebGLRenderTarget } from 'three';\nimport { Pass, FullScreenQuad } from '../postprocessing/Pass.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\nclass OutlinePass extends Pass {\n  constructor(resolution, scene, camera, selectedObjects) {\n    super();\n    this.renderScene = scene;\n    this.renderCamera = camera;\n    this.selectedObjects = selectedObjects !== undefined ? selectedObjects : [];\n    this.visibleEdgeColor = new Color(1, 1, 1);\n    this.hiddenEdgeColor = new Color(0.1, 0.04, 0.02);\n    this.edgeGlow = 0.0;\n    this.usePatternTexture = false;\n    this.edgeThickness = 1.0;\n    this.edgeStrength = 3.0;\n    this.downSampleRatio = 2;\n    this.pulsePeriod = 0;\n    this._visibilityCache = new Map();\n    this.resolution = resolution !== undefined ? new Vector2(resolution.x, resolution.y) : new Vector2(256, 256);\n    const pars = {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      format: RGBAFormat\n    };\n    const resx = Math.round(this.resolution.x / this.downSampleRatio);\n    const resy = Math.round(this.resolution.y / this.downSampleRatio);\n    this.maskBufferMaterial = new MeshBasicMaterial({\n      color: 0xffffff\n    });\n    this.maskBufferMaterial.side = DoubleSide;\n    this.renderTargetMaskBuffer = new WebGLRenderTarget(this.resolution.x, this.resolution.y, pars);\n    this.renderTargetMaskBuffer.texture.name = 'OutlinePass.mask';\n    this.renderTargetMaskBuffer.texture.generateMipmaps = false;\n    this.depthMaterial = new MeshDepthMaterial();\n    this.depthMaterial.side = DoubleSide;\n    this.depthMaterial.depthPacking = RGBADepthPacking;\n    this.depthMaterial.blending = NoBlending;\n    this.prepareMaskMaterial = this.getPrepareMaskMaterial();\n    this.prepareMaskMaterial.side = DoubleSide;\n    this.prepareMaskMaterial.fragmentShader = replaceDepthToViewZ(this.prepareMaskMaterial.fragmentShader, this.renderCamera);\n    this.renderTargetDepthBuffer = new WebGLRenderTarget(this.resolution.x, this.resolution.y, pars);\n    this.renderTargetDepthBuffer.texture.name = 'OutlinePass.depth';\n    this.renderTargetDepthBuffer.texture.generateMipmaps = false;\n    this.renderTargetMaskDownSampleBuffer = new WebGLRenderTarget(resx, resy, pars);\n    this.renderTargetMaskDownSampleBuffer.texture.name = 'OutlinePass.depthDownSample';\n    this.renderTargetMaskDownSampleBuffer.texture.generateMipmaps = false;\n    this.renderTargetBlurBuffer1 = new WebGLRenderTarget(resx, resy, pars);\n    this.renderTargetBlurBuffer1.texture.name = 'OutlinePass.blur1';\n    this.renderTargetBlurBuffer1.texture.generateMipmaps = false;\n    this.renderTargetBlurBuffer2 = new WebGLRenderTarget(Math.round(resx / 2), Math.round(resy / 2), pars);\n    this.renderTargetBlurBuffer2.texture.name = 'OutlinePass.blur2';\n    this.renderTargetBlurBuffer2.texture.generateMipmaps = false;\n    this.edgeDetectionMaterial = this.getEdgeDetectionMaterial();\n    this.renderTargetEdgeBuffer1 = new WebGLRenderTarget(resx, resy, pars);\n    this.renderTargetEdgeBuffer1.texture.name = 'OutlinePass.edge1';\n    this.renderTargetEdgeBuffer1.texture.generateMipmaps = false;\n    this.renderTargetEdgeBuffer2 = new WebGLRenderTarget(Math.round(resx / 2), Math.round(resy / 2), pars);\n    this.renderTargetEdgeBuffer2.texture.name = 'OutlinePass.edge2';\n    this.renderTargetEdgeBuffer2.texture.generateMipmaps = false;\n    const MAX_EDGE_THICKNESS = 4;\n    const MAX_EDGE_GLOW = 4;\n    this.separableBlurMaterial1 = this.getSeperableBlurMaterial(MAX_EDGE_THICKNESS);\n    this.separableBlurMaterial1.uniforms['texSize'].value.set(resx, resy);\n    this.separableBlurMaterial1.uniforms['kernelRadius'].value = 1;\n    this.separableBlurMaterial2 = this.getSeperableBlurMaterial(MAX_EDGE_GLOW);\n    this.separableBlurMaterial2.uniforms['texSize'].value.set(Math.round(resx / 2), Math.round(resy / 2));\n    this.separableBlurMaterial2.uniforms['kernelRadius'].value = MAX_EDGE_GLOW;\n\n    // Overlay material\n    this.overlayMaterial = this.getOverlayMaterial();\n\n    // copy material\n    if (CopyShader === undefined) console.error('THREE.OutlinePass relies on CopyShader');\n    const copyShader = CopyShader;\n    this.copyUniforms = UniformsUtils.clone(copyShader.uniforms);\n    this.copyUniforms['opacity'].value = 1.0;\n    this.materialCopy = new ShaderMaterial({\n      uniforms: this.copyUniforms,\n      vertexShader: copyShader.vertexShader,\n      fragmentShader: copyShader.fragmentShader,\n      blending: NoBlending,\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n    this.enabled = true;\n    this.needsSwap = false;\n    this._oldClearColor = new Color();\n    this.oldClearAlpha = 1;\n    this.fsQuad = new FullScreenQuad(null);\n    this.tempPulseColor1 = new Color();\n    this.tempPulseColor2 = new Color();\n    this.textureMatrix = new Matrix4();\n    function replaceDepthToViewZ(string, camera) {\n      var type = camera.isPerspectiveCamera ? 'perspective' : 'orthographic';\n      return string.replace(/DEPTH_TO_VIEW_Z/g, type + 'DepthToViewZ');\n    }\n  }\n  dispose() {\n    this.renderTargetMaskBuffer.dispose();\n    this.renderTargetDepthBuffer.dispose();\n    this.renderTargetMaskDownSampleBuffer.dispose();\n    this.renderTargetBlurBuffer1.dispose();\n    this.renderTargetBlurBuffer2.dispose();\n    this.renderTargetEdgeBuffer1.dispose();\n    this.renderTargetEdgeBuffer2.dispose();\n  }\n  setSize(width, height) {\n    this.renderTargetMaskBuffer.setSize(width, height);\n    this.renderTargetDepthBuffer.setSize(width, height);\n    let resx = Math.round(width / this.downSampleRatio);\n    let resy = Math.round(height / this.downSampleRatio);\n    this.renderTargetMaskDownSampleBuffer.setSize(resx, resy);\n    this.renderTargetBlurBuffer1.setSize(resx, resy);\n    this.renderTargetEdgeBuffer1.setSize(resx, resy);\n    this.separableBlurMaterial1.uniforms['texSize'].value.set(resx, resy);\n    resx = Math.round(resx / 2);\n    resy = Math.round(resy / 2);\n    this.renderTargetBlurBuffer2.setSize(resx, resy);\n    this.renderTargetEdgeBuffer2.setSize(resx, resy);\n    this.separableBlurMaterial2.uniforms['texSize'].value.set(resx, resy);\n  }\n  changeVisibilityOfSelectedObjects(bVisible) {\n    const cache = this._visibilityCache;\n    function gatherSelectedMeshesCallBack(object) {\n      if (object.isMesh) {\n        if (bVisible === true) {\n          object.visible = cache.get(object);\n        } else {\n          cache.set(object, object.visible);\n          object.visible = bVisible;\n        }\n      }\n    }\n    for (let i = 0; i < this.selectedObjects.length; i++) {\n      const selectedObject = this.selectedObjects[i];\n      selectedObject.traverse(gatherSelectedMeshesCallBack);\n    }\n  }\n  changeVisibilityOfNonSelectedObjects(bVisible) {\n    const cache = this._visibilityCache;\n    const selectedMeshes = [];\n    function gatherSelectedMeshesCallBack(object) {\n      if (object.isMesh) selectedMeshes.push(object);\n    }\n    for (let i = 0; i < this.selectedObjects.length; i++) {\n      const selectedObject = this.selectedObjects[i];\n      selectedObject.traverse(gatherSelectedMeshesCallBack);\n    }\n    function VisibilityChangeCallBack(object) {\n      if (object.isMesh || object.isSprite) {\n        // only meshes and sprites are supported by OutlinePass\n\n        let bFound = false;\n        for (let i = 0; i < selectedMeshes.length; i++) {\n          const selectedObjectId = selectedMeshes[i].id;\n          if (selectedObjectId === object.id) {\n            bFound = true;\n            break;\n          }\n        }\n        if (bFound === false) {\n          const visibility = object.visible;\n          if (bVisible === false || cache.get(object) === true) {\n            object.visible = bVisible;\n          }\n          cache.set(object, visibility);\n        }\n      } else if (object.isPoints || object.isLine) {\n        // the visibilty of points and lines is always set to false in order to\n        // not affect the outline computation\n\n        if (bVisible === true) {\n          object.visible = cache.get(object); // restore\n        } else {\n          cache.set(object, object.visible);\n          object.visible = bVisible;\n        }\n      }\n    }\n    this.renderScene.traverse(VisibilityChangeCallBack);\n  }\n  updateTextureMatrix() {\n    this.textureMatrix.set(0.5, 0.0, 0.0, 0.5, 0.0, 0.5, 0.0, 0.5, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 1.0);\n    this.textureMatrix.multiply(this.renderCamera.projectionMatrix);\n    this.textureMatrix.multiply(this.renderCamera.matrixWorldInverse);\n  }\n  render(renderer, writeBuffer, readBuffer, deltaTime, maskActive) {\n    if (this.selectedObjects.length > 0) {\n      renderer.getClearColor(this._oldClearColor);\n      this.oldClearAlpha = renderer.getClearAlpha();\n      const oldAutoClear = renderer.autoClear;\n      renderer.autoClear = false;\n      if (maskActive) renderer.state.buffers.stencil.setTest(false);\n      renderer.setClearColor(0xffffff, 1);\n\n      // Make selected objects invisible\n      this.changeVisibilityOfSelectedObjects(false);\n      const currentBackground = this.renderScene.background;\n      this.renderScene.background = null;\n\n      // 1. Draw Non Selected objects in the depth buffer\n      this.renderScene.overrideMaterial = this.depthMaterial;\n      renderer.setRenderTarget(this.renderTargetDepthBuffer);\n      renderer.clear();\n      renderer.render(this.renderScene, this.renderCamera);\n\n      // Make selected objects visible\n      this.changeVisibilityOfSelectedObjects(true);\n      this._visibilityCache.clear();\n\n      // Update Texture Matrix for Depth compare\n      this.updateTextureMatrix();\n\n      // Make non selected objects invisible, and draw only the selected objects, by comparing the depth buffer of non selected objects\n      this.changeVisibilityOfNonSelectedObjects(false);\n      this.renderScene.overrideMaterial = this.prepareMaskMaterial;\n      this.prepareMaskMaterial.uniforms['cameraNearFar'].value.set(this.renderCamera.near, this.renderCamera.far);\n      this.prepareMaskMaterial.uniforms['depthTexture'].value = this.renderTargetDepthBuffer.texture;\n      this.prepareMaskMaterial.uniforms['textureMatrix'].value = this.textureMatrix;\n      renderer.setRenderTarget(this.renderTargetMaskBuffer);\n      renderer.clear();\n      renderer.render(this.renderScene, this.renderCamera);\n      this.renderScene.overrideMaterial = null;\n      this.changeVisibilityOfNonSelectedObjects(true);\n      this._visibilityCache.clear();\n      this.renderScene.background = currentBackground;\n\n      // 2. Downsample to Half resolution\n      this.fsQuad.material = this.materialCopy;\n      this.copyUniforms['tDiffuse'].value = this.renderTargetMaskBuffer.texture;\n      renderer.setRenderTarget(this.renderTargetMaskDownSampleBuffer);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      this.tempPulseColor1.copy(this.visibleEdgeColor);\n      this.tempPulseColor2.copy(this.hiddenEdgeColor);\n      if (this.pulsePeriod > 0) {\n        const scalar = (1 + 0.25) / 2 + Math.cos(performance.now() * 0.01 / this.pulsePeriod) * (1.0 - 0.25) / 2;\n        this.tempPulseColor1.multiplyScalar(scalar);\n        this.tempPulseColor2.multiplyScalar(scalar);\n      }\n\n      // 3. Apply Edge Detection Pass\n      this.fsQuad.material = this.edgeDetectionMaterial;\n      this.edgeDetectionMaterial.uniforms['maskTexture'].value = this.renderTargetMaskDownSampleBuffer.texture;\n      this.edgeDetectionMaterial.uniforms['texSize'].value.set(this.renderTargetMaskDownSampleBuffer.width, this.renderTargetMaskDownSampleBuffer.height);\n      this.edgeDetectionMaterial.uniforms['visibleEdgeColor'].value = this.tempPulseColor1;\n      this.edgeDetectionMaterial.uniforms['hiddenEdgeColor'].value = this.tempPulseColor2;\n      renderer.setRenderTarget(this.renderTargetEdgeBuffer1);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n\n      // 4. Apply Blur on Half res\n      this.fsQuad.material = this.separableBlurMaterial1;\n      this.separableBlurMaterial1.uniforms['colorTexture'].value = this.renderTargetEdgeBuffer1.texture;\n      this.separableBlurMaterial1.uniforms['direction'].value = OutlinePass.BlurDirectionX;\n      this.separableBlurMaterial1.uniforms['kernelRadius'].value = this.edgeThickness;\n      renderer.setRenderTarget(this.renderTargetBlurBuffer1);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      this.separableBlurMaterial1.uniforms['colorTexture'].value = this.renderTargetBlurBuffer1.texture;\n      this.separableBlurMaterial1.uniforms['direction'].value = OutlinePass.BlurDirectionY;\n      renderer.setRenderTarget(this.renderTargetEdgeBuffer1);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n\n      // Apply Blur on quarter res\n      this.fsQuad.material = this.separableBlurMaterial2;\n      this.separableBlurMaterial2.uniforms['colorTexture'].value = this.renderTargetEdgeBuffer1.texture;\n      this.separableBlurMaterial2.uniforms['direction'].value = OutlinePass.BlurDirectionX;\n      renderer.setRenderTarget(this.renderTargetBlurBuffer2);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n      this.separableBlurMaterial2.uniforms['colorTexture'].value = this.renderTargetBlurBuffer2.texture;\n      this.separableBlurMaterial2.uniforms['direction'].value = OutlinePass.BlurDirectionY;\n      renderer.setRenderTarget(this.renderTargetEdgeBuffer2);\n      renderer.clear();\n      this.fsQuad.render(renderer);\n\n      // Blend it additively over the input texture\n      this.fsQuad.material = this.overlayMaterial;\n      this.overlayMaterial.uniforms['maskTexture'].value = this.renderTargetMaskBuffer.texture;\n      this.overlayMaterial.uniforms['edgeTexture1'].value = this.renderTargetEdgeBuffer1.texture;\n      this.overlayMaterial.uniforms['edgeTexture2'].value = this.renderTargetEdgeBuffer2.texture;\n      this.overlayMaterial.uniforms['patternTexture'].value = this.patternTexture;\n      this.overlayMaterial.uniforms['edgeStrength'].value = this.edgeStrength;\n      this.overlayMaterial.uniforms['edgeGlow'].value = this.edgeGlow;\n      this.overlayMaterial.uniforms['usePatternTexture'].value = this.usePatternTexture;\n      if (maskActive) renderer.state.buffers.stencil.setTest(true);\n      renderer.setRenderTarget(readBuffer);\n      this.fsQuad.render(renderer);\n      renderer.setClearColor(this._oldClearColor, this.oldClearAlpha);\n      renderer.autoClear = oldAutoClear;\n    }\n    if (this.renderToScreen) {\n      this.fsQuad.material = this.materialCopy;\n      this.copyUniforms['tDiffuse'].value = readBuffer.texture;\n      renderer.setRenderTarget(null);\n      this.fsQuad.render(renderer);\n    }\n  }\n  getPrepareMaskMaterial() {\n    return new ShaderMaterial({\n      uniforms: {\n        'depthTexture': {\n          value: null\n        },\n        'cameraNearFar': {\n          value: new Vector2(0.5, 0.5)\n        },\n        'textureMatrix': {\n          value: null\n        }\n      },\n      vertexShader: `#include <morphtarget_pars_vertex>\n\t\t\t\t#include <skinning_pars_vertex>\n\n\t\t\t\tvarying vec4 projTexCoord;\n\t\t\t\tvarying vec4 vPosition;\n\t\t\t\tuniform mat4 textureMatrix;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\t#include <skinbase_vertex>\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <morphtarget_vertex>\n\t\t\t\t\t#include <skinning_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t\tvPosition = mvPosition;\n\t\t\t\t\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n\t\t\t\t\tprojTexCoord = textureMatrix * worldPosition;\n\n\t\t\t\t}`,\n      fragmentShader: `#include <packing>\n\t\t\t\tvarying vec4 vPosition;\n\t\t\t\tvarying vec4 projTexCoord;\n\t\t\t\tuniform sampler2D depthTexture;\n\t\t\t\tuniform vec2 cameraNearFar;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tfloat depth = unpackRGBAToDepth(texture2DProj( depthTexture, projTexCoord ));\n\t\t\t\t\tfloat viewZ = - DEPTH_TO_VIEW_Z( depth, cameraNearFar.x, cameraNearFar.y );\n\t\t\t\t\tfloat depthTest = (-vPosition.z > viewZ) ? 1.0 : 0.0;\n\t\t\t\t\tgl_FragColor = vec4(0.0, depthTest, 1.0, 1.0);\n\n\t\t\t\t}`\n    });\n  }\n  getEdgeDetectionMaterial() {\n    return new ShaderMaterial({\n      uniforms: {\n        'maskTexture': {\n          value: null\n        },\n        'texSize': {\n          value: new Vector2(0.5, 0.5)\n        },\n        'visibleEdgeColor': {\n          value: new Vector3(1.0, 1.0, 1.0)\n        },\n        'hiddenEdgeColor': {\n          value: new Vector3(1.0, 1.0, 1.0)\n        }\n      },\n      vertexShader: `varying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n      fragmentShader: `varying vec2 vUv;\n\n\t\t\t\tuniform sampler2D maskTexture;\n\t\t\t\tuniform vec2 texSize;\n\t\t\t\tuniform vec3 visibleEdgeColor;\n\t\t\t\tuniform vec3 hiddenEdgeColor;\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\n\t\t\t\t\tvec4 uvOffset = vec4(1.0, 0.0, 0.0, 1.0) * vec4(invSize, invSize);\n\t\t\t\t\tvec4 c1 = texture2D( maskTexture, vUv + uvOffset.xy);\n\t\t\t\t\tvec4 c2 = texture2D( maskTexture, vUv - uvOffset.xy);\n\t\t\t\t\tvec4 c3 = texture2D( maskTexture, vUv + uvOffset.yw);\n\t\t\t\t\tvec4 c4 = texture2D( maskTexture, vUv - uvOffset.yw);\n\t\t\t\t\tfloat diff1 = (c1.r - c2.r)*0.5;\n\t\t\t\t\tfloat diff2 = (c3.r - c4.r)*0.5;\n\t\t\t\t\tfloat d = length( vec2(diff1, diff2) );\n\t\t\t\t\tfloat a1 = min(c1.g, c2.g);\n\t\t\t\t\tfloat a2 = min(c3.g, c4.g);\n\t\t\t\t\tfloat visibilityFactor = min(a1, a2);\n\t\t\t\t\tvec3 edgeColor = 1.0 - visibilityFactor > 0.001 ? visibleEdgeColor : hiddenEdgeColor;\n\t\t\t\t\tgl_FragColor = vec4(edgeColor, 1.0) * vec4(d);\n\t\t\t\t}`\n    });\n  }\n  getSeperableBlurMaterial(maxRadius) {\n    return new ShaderMaterial({\n      defines: {\n        'MAX_RADIUS': maxRadius\n      },\n      uniforms: {\n        'colorTexture': {\n          value: null\n        },\n        'texSize': {\n          value: new Vector2(0.5, 0.5)\n        },\n        'direction': {\n          value: new Vector2(0.5, 0.5)\n        },\n        'kernelRadius': {\n          value: 1.0\n        }\n      },\n      vertexShader: `varying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n      fragmentShader: `#include <common>\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tuniform sampler2D colorTexture;\n\t\t\t\tuniform vec2 texSize;\n\t\t\t\tuniform vec2 direction;\n\t\t\t\tuniform float kernelRadius;\n\n\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\n\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\n\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, kernelRadius);\n\t\t\t\t\tvec4 diffuseSum = texture2D( colorTexture, vUv) * weightSum;\n\t\t\t\t\tvec2 delta = direction * invSize * kernelRadius/float(MAX_RADIUS);\n\t\t\t\t\tvec2 uvOffset = delta;\n\t\t\t\t\tfor( int i = 1; i <= MAX_RADIUS; i ++ ) {\n\t\t\t\t\t\tfloat w = gaussianPdf(uvOffset.x, kernelRadius);\n\t\t\t\t\t\tvec4 sample1 = texture2D( colorTexture, vUv + uvOffset);\n\t\t\t\t\t\tvec4 sample2 = texture2D( colorTexture, vUv - uvOffset);\n\t\t\t\t\t\tdiffuseSum += ((sample1 + sample2) * w);\n\t\t\t\t\t\tweightSum += (2.0 * w);\n\t\t\t\t\t\tuvOffset += delta;\n\t\t\t\t\t}\n\t\t\t\t\tgl_FragColor = diffuseSum/weightSum;\n\t\t\t\t}`\n    });\n  }\n  getOverlayMaterial() {\n    return new ShaderMaterial({\n      uniforms: {\n        'maskTexture': {\n          value: null\n        },\n        'edgeTexture1': {\n          value: null\n        },\n        'edgeTexture2': {\n          value: null\n        },\n        'patternTexture': {\n          value: null\n        },\n        'edgeStrength': {\n          value: 1.0\n        },\n        'edgeGlow': {\n          value: 1.0\n        },\n        'usePatternTexture': {\n          value: 0.0\n        }\n      },\n      vertexShader: `varying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n      fragmentShader: `varying vec2 vUv;\n\n\t\t\t\tuniform sampler2D maskTexture;\n\t\t\t\tuniform sampler2D edgeTexture1;\n\t\t\t\tuniform sampler2D edgeTexture2;\n\t\t\t\tuniform sampler2D patternTexture;\n\t\t\t\tuniform float edgeStrength;\n\t\t\t\tuniform float edgeGlow;\n\t\t\t\tuniform bool usePatternTexture;\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec4 edgeValue1 = texture2D(edgeTexture1, vUv);\n\t\t\t\t\tvec4 edgeValue2 = texture2D(edgeTexture2, vUv);\n\t\t\t\t\tvec4 maskColor = texture2D(maskTexture, vUv);\n\t\t\t\t\tvec4 patternColor = texture2D(patternTexture, 6.0 * vUv);\n\t\t\t\t\tfloat visibilityFactor = 1.0 - maskColor.g > 0.0 ? 1.0 : 0.5;\n\t\t\t\t\tvec4 edgeValue = edgeValue1 + edgeValue2 * edgeGlow;\n\t\t\t\t\tvec4 finalColor = edgeStrength * maskColor.r * edgeValue;\n\t\t\t\t\tif(usePatternTexture)\n\t\t\t\t\t\tfinalColor += + visibilityFactor * (1.0 - maskColor.r) * (1.0 - patternColor.r);\n\t\t\t\t\tgl_FragColor = finalColor;\n\t\t\t\t}`,\n      blending: AdditiveBlending,\n      depthTest: false,\n      depthWrite: false,\n      transparent: true\n    });\n  }\n}\nOutlinePass.BlurDirectionX = new Vector2(1.0, 0.0);\nOutlinePass.BlurDirectionY = new Vector2(0.0, 1.0);\nexport { OutlinePass };","map":{"version":3,"names":["AdditiveBlending","Color","DoubleSide","LinearFilter","Matrix4","MeshBasicMaterial","MeshDepthMaterial","NoBlending","RGBADepthPacking","RGBAFormat","ShaderMaterial","UniformsUtils","Vector2","Vector3","WebGLRenderTarget","Pass","FullScreenQuad","CopyShader","OutlinePass","constructor","resolution","scene","camera","selectedObjects","renderScene","renderCamera","undefined","visibleEdgeColor","hiddenEdgeColor","edgeGlow","usePatternTexture","edgeThickness","edgeStrength","downSampleRatio","pulsePeriod","_visibilityCache","Map","x","y","pars","minFilter","magFilter","format","resx","Math","round","resy","maskBufferMaterial","color","side","renderTargetMaskBuffer","texture","name","generateMipmaps","depthMaterial","depthPacking","blending","prepareMaskMaterial","getPrepareMaskMaterial","fragmentShader","replaceDepthToViewZ","renderTargetDepthBuffer","renderTargetMaskDownSampleBuffer","renderTargetBlurBuffer1","renderTargetBlurBuffer2","edgeDetectionMaterial","getEdgeDetectionMaterial","renderTargetEdgeBuffer1","renderTargetEdgeBuffer2","MAX_EDGE_THICKNESS","MAX_EDGE_GLOW","separableBlurMaterial1","getSeperableBlurMaterial","uniforms","value","set","separableBlurMaterial2","overlayMaterial","getOverlayMaterial","console","error","copyShader","copyUniforms","clone","materialCopy","vertexShader","depthTest","depthWrite","transparent","enabled","needsSwap","_oldClearColor","oldClearAlpha","fsQuad","tempPulseColor1","tempPulseColor2","textureMatrix","string","type","isPerspectiveCamera","replace","dispose","setSize","width","height","changeVisibilityOfSelectedObjects","bVisible","cache","gatherSelectedMeshesCallBack","object","isMesh","visible","get","i","length","selectedObject","traverse","changeVisibilityOfNonSelectedObjects","selectedMeshes","push","VisibilityChangeCallBack","isSprite","bFound","selectedObjectId","id","visibility","isPoints","isLine","updateTextureMatrix","multiply","projectionMatrix","matrixWorldInverse","render","renderer","writeBuffer","readBuffer","deltaTime","maskActive","getClearColor","getClearAlpha","oldAutoClear","autoClear","state","buffers","stencil","setTest","setClearColor","currentBackground","background","overrideMaterial","setRenderTarget","clear","near","far","material","copy","scalar","cos","performance","now","multiplyScalar","BlurDirectionX","BlurDirectionY","patternTexture","renderToScreen","maxRadius","defines"],"sources":["D:/Others/Three js/rumbleworlds/node_modules/three/examples/jsm/postprocessing/OutlinePass.js"],"sourcesContent":["import {\n\tAdditiveBlending,\n\tColor,\n\tDoubleSide,\n\tLinearFilter,\n\tMatrix4,\n\tMeshBasicMaterial,\n\tMeshDepthMaterial,\n\tNoBlending,\n\tRGBADepthPacking,\n\tRGBAFormat,\n\tShaderMaterial,\n\tUniformsUtils,\n\tVector2,\n\tVector3,\n\tWebGLRenderTarget\n} from 'three';\nimport { Pass, FullScreenQuad } from '../postprocessing/Pass.js';\nimport { CopyShader } from '../shaders/CopyShader.js';\n\nclass OutlinePass extends Pass {\n\n\tconstructor( resolution, scene, camera, selectedObjects ) {\n\n\t\tsuper();\n\n\t\tthis.renderScene = scene;\n\t\tthis.renderCamera = camera;\n\t\tthis.selectedObjects = selectedObjects !== undefined ? selectedObjects : [];\n\t\tthis.visibleEdgeColor = new Color( 1, 1, 1 );\n\t\tthis.hiddenEdgeColor = new Color( 0.1, 0.04, 0.02 );\n\t\tthis.edgeGlow = 0.0;\n\t\tthis.usePatternTexture = false;\n\t\tthis.edgeThickness = 1.0;\n\t\tthis.edgeStrength = 3.0;\n\t\tthis.downSampleRatio = 2;\n\t\tthis.pulsePeriod = 0;\n\n\t\tthis._visibilityCache = new Map();\n\n\n\t\tthis.resolution = ( resolution !== undefined ) ? new Vector2( resolution.x, resolution.y ) : new Vector2( 256, 256 );\n\n\t\tconst pars = { minFilter: LinearFilter, magFilter: LinearFilter, format: RGBAFormat };\n\n\t\tconst resx = Math.round( this.resolution.x / this.downSampleRatio );\n\t\tconst resy = Math.round( this.resolution.y / this.downSampleRatio );\n\n\t\tthis.maskBufferMaterial = new MeshBasicMaterial( { color: 0xffffff } );\n\t\tthis.maskBufferMaterial.side = DoubleSide;\n\t\tthis.renderTargetMaskBuffer = new WebGLRenderTarget( this.resolution.x, this.resolution.y, pars );\n\t\tthis.renderTargetMaskBuffer.texture.name = 'OutlinePass.mask';\n\t\tthis.renderTargetMaskBuffer.texture.generateMipmaps = false;\n\n\t\tthis.depthMaterial = new MeshDepthMaterial();\n\t\tthis.depthMaterial.side = DoubleSide;\n\t\tthis.depthMaterial.depthPacking = RGBADepthPacking;\n\t\tthis.depthMaterial.blending = NoBlending;\n\n\t\tthis.prepareMaskMaterial = this.getPrepareMaskMaterial();\n\t\tthis.prepareMaskMaterial.side = DoubleSide;\n\t\tthis.prepareMaskMaterial.fragmentShader = replaceDepthToViewZ( this.prepareMaskMaterial.fragmentShader, this.renderCamera );\n\n\t\tthis.renderTargetDepthBuffer = new WebGLRenderTarget( this.resolution.x, this.resolution.y, pars );\n\t\tthis.renderTargetDepthBuffer.texture.name = 'OutlinePass.depth';\n\t\tthis.renderTargetDepthBuffer.texture.generateMipmaps = false;\n\n\t\tthis.renderTargetMaskDownSampleBuffer = new WebGLRenderTarget( resx, resy, pars );\n\t\tthis.renderTargetMaskDownSampleBuffer.texture.name = 'OutlinePass.depthDownSample';\n\t\tthis.renderTargetMaskDownSampleBuffer.texture.generateMipmaps = false;\n\n\t\tthis.renderTargetBlurBuffer1 = new WebGLRenderTarget( resx, resy, pars );\n\t\tthis.renderTargetBlurBuffer1.texture.name = 'OutlinePass.blur1';\n\t\tthis.renderTargetBlurBuffer1.texture.generateMipmaps = false;\n\t\tthis.renderTargetBlurBuffer2 = new WebGLRenderTarget( Math.round( resx / 2 ), Math.round( resy / 2 ), pars );\n\t\tthis.renderTargetBlurBuffer2.texture.name = 'OutlinePass.blur2';\n\t\tthis.renderTargetBlurBuffer2.texture.generateMipmaps = false;\n\n\t\tthis.edgeDetectionMaterial = this.getEdgeDetectionMaterial();\n\t\tthis.renderTargetEdgeBuffer1 = new WebGLRenderTarget( resx, resy, pars );\n\t\tthis.renderTargetEdgeBuffer1.texture.name = 'OutlinePass.edge1';\n\t\tthis.renderTargetEdgeBuffer1.texture.generateMipmaps = false;\n\t\tthis.renderTargetEdgeBuffer2 = new WebGLRenderTarget( Math.round( resx / 2 ), Math.round( resy / 2 ), pars );\n\t\tthis.renderTargetEdgeBuffer2.texture.name = 'OutlinePass.edge2';\n\t\tthis.renderTargetEdgeBuffer2.texture.generateMipmaps = false;\n\n\t\tconst MAX_EDGE_THICKNESS = 4;\n\t\tconst MAX_EDGE_GLOW = 4;\n\n\t\tthis.separableBlurMaterial1 = this.getSeperableBlurMaterial( MAX_EDGE_THICKNESS );\n\t\tthis.separableBlurMaterial1.uniforms[ 'texSize' ].value.set( resx, resy );\n\t\tthis.separableBlurMaterial1.uniforms[ 'kernelRadius' ].value = 1;\n\t\tthis.separableBlurMaterial2 = this.getSeperableBlurMaterial( MAX_EDGE_GLOW );\n\t\tthis.separableBlurMaterial2.uniforms[ 'texSize' ].value.set( Math.round( resx / 2 ), Math.round( resy / 2 ) );\n\t\tthis.separableBlurMaterial2.uniforms[ 'kernelRadius' ].value = MAX_EDGE_GLOW;\n\n\t\t// Overlay material\n\t\tthis.overlayMaterial = this.getOverlayMaterial();\n\n\t\t// copy material\n\t\tif ( CopyShader === undefined ) console.error( 'THREE.OutlinePass relies on CopyShader' );\n\n\t\tconst copyShader = CopyShader;\n\n\t\tthis.copyUniforms = UniformsUtils.clone( copyShader.uniforms );\n\t\tthis.copyUniforms[ 'opacity' ].value = 1.0;\n\n\t\tthis.materialCopy = new ShaderMaterial( {\n\t\t\tuniforms: this.copyUniforms,\n\t\t\tvertexShader: copyShader.vertexShader,\n\t\t\tfragmentShader: copyShader.fragmentShader,\n\t\t\tblending: NoBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\ttransparent: true\n\t\t} );\n\n\t\tthis.enabled = true;\n\t\tthis.needsSwap = false;\n\n\t\tthis._oldClearColor = new Color();\n\t\tthis.oldClearAlpha = 1;\n\n\t\tthis.fsQuad = new FullScreenQuad( null );\n\n\t\tthis.tempPulseColor1 = new Color();\n\t\tthis.tempPulseColor2 = new Color();\n\t\tthis.textureMatrix = new Matrix4();\n\n\t\tfunction replaceDepthToViewZ( string, camera ) {\n\n\t\t\tvar type = camera.isPerspectiveCamera ? 'perspective' : 'orthographic';\n\n\t\t\treturn string.replace( /DEPTH_TO_VIEW_Z/g, type + 'DepthToViewZ' );\n\n\t\t}\n\n\t}\n\n\tdispose() {\n\n\t\tthis.renderTargetMaskBuffer.dispose();\n\t\tthis.renderTargetDepthBuffer.dispose();\n\t\tthis.renderTargetMaskDownSampleBuffer.dispose();\n\t\tthis.renderTargetBlurBuffer1.dispose();\n\t\tthis.renderTargetBlurBuffer2.dispose();\n\t\tthis.renderTargetEdgeBuffer1.dispose();\n\t\tthis.renderTargetEdgeBuffer2.dispose();\n\n\t}\n\n\tsetSize( width, height ) {\n\n\t\tthis.renderTargetMaskBuffer.setSize( width, height );\n\t\tthis.renderTargetDepthBuffer.setSize( width, height );\n\n\t\tlet resx = Math.round( width / this.downSampleRatio );\n\t\tlet resy = Math.round( height / this.downSampleRatio );\n\t\tthis.renderTargetMaskDownSampleBuffer.setSize( resx, resy );\n\t\tthis.renderTargetBlurBuffer1.setSize( resx, resy );\n\t\tthis.renderTargetEdgeBuffer1.setSize( resx, resy );\n\t\tthis.separableBlurMaterial1.uniforms[ 'texSize' ].value.set( resx, resy );\n\n\t\tresx = Math.round( resx / 2 );\n\t\tresy = Math.round( resy / 2 );\n\n\t\tthis.renderTargetBlurBuffer2.setSize( resx, resy );\n\t\tthis.renderTargetEdgeBuffer2.setSize( resx, resy );\n\n\t\tthis.separableBlurMaterial2.uniforms[ 'texSize' ].value.set( resx, resy );\n\n\t}\n\n\tchangeVisibilityOfSelectedObjects( bVisible ) {\n\n\t\tconst cache = this._visibilityCache;\n\n\t\tfunction gatherSelectedMeshesCallBack( object ) {\n\n\t\t\tif ( object.isMesh ) {\n\n\t\t\t\tif ( bVisible === true ) {\n\n\t\t\t\t\tobject.visible = cache.get( object );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcache.set( object, object.visible );\n\t\t\t\t\tobject.visible = bVisible;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( let i = 0; i < this.selectedObjects.length; i ++ ) {\n\n\t\t\tconst selectedObject = this.selectedObjects[ i ];\n\t\t\tselectedObject.traverse( gatherSelectedMeshesCallBack );\n\n\t\t}\n\n\t}\n\n\tchangeVisibilityOfNonSelectedObjects( bVisible ) {\n\n\t\tconst cache = this._visibilityCache;\n\t\tconst selectedMeshes = [];\n\n\t\tfunction gatherSelectedMeshesCallBack( object ) {\n\n\t\t\tif ( object.isMesh ) selectedMeshes.push( object );\n\n\t\t}\n\n\t\tfor ( let i = 0; i < this.selectedObjects.length; i ++ ) {\n\n\t\t\tconst selectedObject = this.selectedObjects[ i ];\n\t\t\tselectedObject.traverse( gatherSelectedMeshesCallBack );\n\n\t\t}\n\n\t\tfunction VisibilityChangeCallBack( object ) {\n\n\t\t\tif ( object.isMesh || object.isSprite ) {\n\n\t\t\t\t// only meshes and sprites are supported by OutlinePass\n\n\t\t\t\tlet bFound = false;\n\n\t\t\t\tfor ( let i = 0; i < selectedMeshes.length; i ++ ) {\n\n\t\t\t\t\tconst selectedObjectId = selectedMeshes[ i ].id;\n\n\t\t\t\t\tif ( selectedObjectId === object.id ) {\n\n\t\t\t\t\t\tbFound = true;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( bFound === false ) {\n\n\t\t\t\t\tconst visibility = object.visible;\n\n\t\t\t\t\tif ( bVisible === false || cache.get( object ) === true ) {\n\n\t\t\t\t\t\tobject.visible = bVisible;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcache.set( object, visibility );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isPoints || object.isLine ) {\n\n\t\t\t\t// the visibilty of points and lines is always set to false in order to\n\t\t\t\t// not affect the outline computation\n\n\t\t\t\tif ( bVisible === true ) {\n\n\t\t\t\t\tobject.visible = cache.get( object ); // restore\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcache.set( object, object.visible );\n\t\t\t\t\tobject.visible = bVisible;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.renderScene.traverse( VisibilityChangeCallBack );\n\n\t}\n\n\tupdateTextureMatrix() {\n\n\t\tthis.textureMatrix.set( 0.5, 0.0, 0.0, 0.5,\n\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t0.0, 0.0, 0.0, 1.0 );\n\t\tthis.textureMatrix.multiply( this.renderCamera.projectionMatrix );\n\t\tthis.textureMatrix.multiply( this.renderCamera.matrixWorldInverse );\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer, deltaTime, maskActive ) {\n\n\t\tif ( this.selectedObjects.length > 0 ) {\n\n\t\t\trenderer.getClearColor( this._oldClearColor );\n\t\t\tthis.oldClearAlpha = renderer.getClearAlpha();\n\t\t\tconst oldAutoClear = renderer.autoClear;\n\n\t\t\trenderer.autoClear = false;\n\n\t\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( false );\n\n\t\t\trenderer.setClearColor( 0xffffff, 1 );\n\n\t\t\t// Make selected objects invisible\n\t\t\tthis.changeVisibilityOfSelectedObjects( false );\n\n\t\t\tconst currentBackground = this.renderScene.background;\n\t\t\tthis.renderScene.background = null;\n\n\t\t\t// 1. Draw Non Selected objects in the depth buffer\n\t\t\tthis.renderScene.overrideMaterial = this.depthMaterial;\n\t\t\trenderer.setRenderTarget( this.renderTargetDepthBuffer );\n\t\t\trenderer.clear();\n\t\t\trenderer.render( this.renderScene, this.renderCamera );\n\n\t\t\t// Make selected objects visible\n\t\t\tthis.changeVisibilityOfSelectedObjects( true );\n\t\t\tthis._visibilityCache.clear();\n\n\t\t\t// Update Texture Matrix for Depth compare\n\t\t\tthis.updateTextureMatrix();\n\n\t\t\t// Make non selected objects invisible, and draw only the selected objects, by comparing the depth buffer of non selected objects\n\t\t\tthis.changeVisibilityOfNonSelectedObjects( false );\n\t\t\tthis.renderScene.overrideMaterial = this.prepareMaskMaterial;\n\t\t\tthis.prepareMaskMaterial.uniforms[ 'cameraNearFar' ].value.set( this.renderCamera.near, this.renderCamera.far );\n\t\t\tthis.prepareMaskMaterial.uniforms[ 'depthTexture' ].value = this.renderTargetDepthBuffer.texture;\n\t\t\tthis.prepareMaskMaterial.uniforms[ 'textureMatrix' ].value = this.textureMatrix;\n\t\t\trenderer.setRenderTarget( this.renderTargetMaskBuffer );\n\t\t\trenderer.clear();\n\t\t\trenderer.render( this.renderScene, this.renderCamera );\n\t\t\tthis.renderScene.overrideMaterial = null;\n\t\t\tthis.changeVisibilityOfNonSelectedObjects( true );\n\t\t\tthis._visibilityCache.clear();\n\n\t\t\tthis.renderScene.background = currentBackground;\n\n\t\t\t// 2. Downsample to Half resolution\n\t\t\tthis.fsQuad.material = this.materialCopy;\n\t\t\tthis.copyUniforms[ 'tDiffuse' ].value = this.renderTargetMaskBuffer.texture;\n\t\t\trenderer.setRenderTarget( this.renderTargetMaskDownSampleBuffer );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\tthis.tempPulseColor1.copy( this.visibleEdgeColor );\n\t\t\tthis.tempPulseColor2.copy( this.hiddenEdgeColor );\n\n\t\t\tif ( this.pulsePeriod > 0 ) {\n\n\t\t\t\tconst scalar = ( 1 + 0.25 ) / 2 + Math.cos( performance.now() * 0.01 / this.pulsePeriod ) * ( 1.0 - 0.25 ) / 2;\n\t\t\t\tthis.tempPulseColor1.multiplyScalar( scalar );\n\t\t\t\tthis.tempPulseColor2.multiplyScalar( scalar );\n\n\t\t\t}\n\n\t\t\t// 3. Apply Edge Detection Pass\n\t\t\tthis.fsQuad.material = this.edgeDetectionMaterial;\n\t\t\tthis.edgeDetectionMaterial.uniforms[ 'maskTexture' ].value = this.renderTargetMaskDownSampleBuffer.texture;\n\t\t\tthis.edgeDetectionMaterial.uniforms[ 'texSize' ].value.set( this.renderTargetMaskDownSampleBuffer.width, this.renderTargetMaskDownSampleBuffer.height );\n\t\t\tthis.edgeDetectionMaterial.uniforms[ 'visibleEdgeColor' ].value = this.tempPulseColor1;\n\t\t\tthis.edgeDetectionMaterial.uniforms[ 'hiddenEdgeColor' ].value = this.tempPulseColor2;\n\t\t\trenderer.setRenderTarget( this.renderTargetEdgeBuffer1 );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\t// 4. Apply Blur on Half res\n\t\t\tthis.fsQuad.material = this.separableBlurMaterial1;\n\t\t\tthis.separableBlurMaterial1.uniforms[ 'colorTexture' ].value = this.renderTargetEdgeBuffer1.texture;\n\t\t\tthis.separableBlurMaterial1.uniforms[ 'direction' ].value = OutlinePass.BlurDirectionX;\n\t\t\tthis.separableBlurMaterial1.uniforms[ 'kernelRadius' ].value = this.edgeThickness;\n\t\t\trenderer.setRenderTarget( this.renderTargetBlurBuffer1 );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\t\t\tthis.separableBlurMaterial1.uniforms[ 'colorTexture' ].value = this.renderTargetBlurBuffer1.texture;\n\t\t\tthis.separableBlurMaterial1.uniforms[ 'direction' ].value = OutlinePass.BlurDirectionY;\n\t\t\trenderer.setRenderTarget( this.renderTargetEdgeBuffer1 );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\t// Apply Blur on quarter res\n\t\t\tthis.fsQuad.material = this.separableBlurMaterial2;\n\t\t\tthis.separableBlurMaterial2.uniforms[ 'colorTexture' ].value = this.renderTargetEdgeBuffer1.texture;\n\t\t\tthis.separableBlurMaterial2.uniforms[ 'direction' ].value = OutlinePass.BlurDirectionX;\n\t\t\trenderer.setRenderTarget( this.renderTargetBlurBuffer2 );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\t\t\tthis.separableBlurMaterial2.uniforms[ 'colorTexture' ].value = this.renderTargetBlurBuffer2.texture;\n\t\t\tthis.separableBlurMaterial2.uniforms[ 'direction' ].value = OutlinePass.BlurDirectionY;\n\t\t\trenderer.setRenderTarget( this.renderTargetEdgeBuffer2 );\n\t\t\trenderer.clear();\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\t// Blend it additively over the input texture\n\t\t\tthis.fsQuad.material = this.overlayMaterial;\n\t\t\tthis.overlayMaterial.uniforms[ 'maskTexture' ].value = this.renderTargetMaskBuffer.texture;\n\t\t\tthis.overlayMaterial.uniforms[ 'edgeTexture1' ].value = this.renderTargetEdgeBuffer1.texture;\n\t\t\tthis.overlayMaterial.uniforms[ 'edgeTexture2' ].value = this.renderTargetEdgeBuffer2.texture;\n\t\t\tthis.overlayMaterial.uniforms[ 'patternTexture' ].value = this.patternTexture;\n\t\t\tthis.overlayMaterial.uniforms[ 'edgeStrength' ].value = this.edgeStrength;\n\t\t\tthis.overlayMaterial.uniforms[ 'edgeGlow' ].value = this.edgeGlow;\n\t\t\tthis.overlayMaterial.uniforms[ 'usePatternTexture' ].value = this.usePatternTexture;\n\n\n\t\t\tif ( maskActive ) renderer.state.buffers.stencil.setTest( true );\n\n\t\t\trenderer.setRenderTarget( readBuffer );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t\trenderer.setClearColor( this._oldClearColor, this.oldClearAlpha );\n\t\t\trenderer.autoClear = oldAutoClear;\n\n\t\t}\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\tthis.fsQuad.material = this.materialCopy;\n\t\t\tthis.copyUniforms[ 'tDiffuse' ].value = readBuffer.texture;\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n\tgetPrepareMaskMaterial() {\n\n\t\treturn new ShaderMaterial( {\n\n\t\t\tuniforms: {\n\t\t\t\t'depthTexture': { value: null },\n\t\t\t\t'cameraNearFar': { value: new Vector2( 0.5, 0.5 ) },\n\t\t\t\t'textureMatrix': { value: null }\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t`#include <morphtarget_pars_vertex>\n\t\t\t\t#include <skinning_pars_vertex>\n\n\t\t\t\tvarying vec4 projTexCoord;\n\t\t\t\tvarying vec4 vPosition;\n\t\t\t\tuniform mat4 textureMatrix;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\t#include <skinbase_vertex>\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <morphtarget_vertex>\n\t\t\t\t\t#include <skinning_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t\tvPosition = mvPosition;\n\t\t\t\t\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n\t\t\t\t\tprojTexCoord = textureMatrix * worldPosition;\n\n\t\t\t\t}`,\n\n\t\t\tfragmentShader:\n\t\t\t\t`#include <packing>\n\t\t\t\tvarying vec4 vPosition;\n\t\t\t\tvarying vec4 projTexCoord;\n\t\t\t\tuniform sampler2D depthTexture;\n\t\t\t\tuniform vec2 cameraNearFar;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tfloat depth = unpackRGBAToDepth(texture2DProj( depthTexture, projTexCoord ));\n\t\t\t\t\tfloat viewZ = - DEPTH_TO_VIEW_Z( depth, cameraNearFar.x, cameraNearFar.y );\n\t\t\t\t\tfloat depthTest = (-vPosition.z > viewZ) ? 1.0 : 0.0;\n\t\t\t\t\tgl_FragColor = vec4(0.0, depthTest, 1.0, 1.0);\n\n\t\t\t\t}`\n\n\t\t} );\n\n\t}\n\n\tgetEdgeDetectionMaterial() {\n\n\t\treturn new ShaderMaterial( {\n\n\t\t\tuniforms: {\n\t\t\t\t'maskTexture': { value: null },\n\t\t\t\t'texSize': { value: new Vector2( 0.5, 0.5 ) },\n\t\t\t\t'visibleEdgeColor': { value: new Vector3( 1.0, 1.0, 1.0 ) },\n\t\t\t\t'hiddenEdgeColor': { value: new Vector3( 1.0, 1.0, 1.0 ) },\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t`varying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n\n\t\t\tfragmentShader:\n\t\t\t\t`varying vec2 vUv;\n\n\t\t\t\tuniform sampler2D maskTexture;\n\t\t\t\tuniform vec2 texSize;\n\t\t\t\tuniform vec3 visibleEdgeColor;\n\t\t\t\tuniform vec3 hiddenEdgeColor;\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\n\t\t\t\t\tvec4 uvOffset = vec4(1.0, 0.0, 0.0, 1.0) * vec4(invSize, invSize);\n\t\t\t\t\tvec4 c1 = texture2D( maskTexture, vUv + uvOffset.xy);\n\t\t\t\t\tvec4 c2 = texture2D( maskTexture, vUv - uvOffset.xy);\n\t\t\t\t\tvec4 c3 = texture2D( maskTexture, vUv + uvOffset.yw);\n\t\t\t\t\tvec4 c4 = texture2D( maskTexture, vUv - uvOffset.yw);\n\t\t\t\t\tfloat diff1 = (c1.r - c2.r)*0.5;\n\t\t\t\t\tfloat diff2 = (c3.r - c4.r)*0.5;\n\t\t\t\t\tfloat d = length( vec2(diff1, diff2) );\n\t\t\t\t\tfloat a1 = min(c1.g, c2.g);\n\t\t\t\t\tfloat a2 = min(c3.g, c4.g);\n\t\t\t\t\tfloat visibilityFactor = min(a1, a2);\n\t\t\t\t\tvec3 edgeColor = 1.0 - visibilityFactor > 0.001 ? visibleEdgeColor : hiddenEdgeColor;\n\t\t\t\t\tgl_FragColor = vec4(edgeColor, 1.0) * vec4(d);\n\t\t\t\t}`\n\t\t} );\n\n\t}\n\n\tgetSeperableBlurMaterial( maxRadius ) {\n\n\t\treturn new ShaderMaterial( {\n\n\t\t\tdefines: {\n\t\t\t\t'MAX_RADIUS': maxRadius,\n\t\t\t},\n\n\t\t\tuniforms: {\n\t\t\t\t'colorTexture': { value: null },\n\t\t\t\t'texSize': { value: new Vector2( 0.5, 0.5 ) },\n\t\t\t\t'direction': { value: new Vector2( 0.5, 0.5 ) },\n\t\t\t\t'kernelRadius': { value: 1.0 }\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t`varying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n\n\t\t\tfragmentShader:\n\t\t\t\t`#include <common>\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tuniform sampler2D colorTexture;\n\t\t\t\tuniform vec2 texSize;\n\t\t\t\tuniform vec2 direction;\n\t\t\t\tuniform float kernelRadius;\n\n\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\n\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\n\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, kernelRadius);\n\t\t\t\t\tvec4 diffuseSum = texture2D( colorTexture, vUv) * weightSum;\n\t\t\t\t\tvec2 delta = direction * invSize * kernelRadius/float(MAX_RADIUS);\n\t\t\t\t\tvec2 uvOffset = delta;\n\t\t\t\t\tfor( int i = 1; i <= MAX_RADIUS; i ++ ) {\n\t\t\t\t\t\tfloat w = gaussianPdf(uvOffset.x, kernelRadius);\n\t\t\t\t\t\tvec4 sample1 = texture2D( colorTexture, vUv + uvOffset);\n\t\t\t\t\t\tvec4 sample2 = texture2D( colorTexture, vUv - uvOffset);\n\t\t\t\t\t\tdiffuseSum += ((sample1 + sample2) * w);\n\t\t\t\t\t\tweightSum += (2.0 * w);\n\t\t\t\t\t\tuvOffset += delta;\n\t\t\t\t\t}\n\t\t\t\t\tgl_FragColor = diffuseSum/weightSum;\n\t\t\t\t}`\n\t\t} );\n\n\t}\n\n\tgetOverlayMaterial() {\n\n\t\treturn new ShaderMaterial( {\n\n\t\t\tuniforms: {\n\t\t\t\t'maskTexture': { value: null },\n\t\t\t\t'edgeTexture1': { value: null },\n\t\t\t\t'edgeTexture2': { value: null },\n\t\t\t\t'patternTexture': { value: null },\n\t\t\t\t'edgeStrength': { value: 1.0 },\n\t\t\t\t'edgeGlow': { value: 1.0 },\n\t\t\t\t'usePatternTexture': { value: 0.0 }\n\t\t\t},\n\n\t\t\tvertexShader:\n\t\t\t\t`varying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,\n\n\t\t\tfragmentShader:\n\t\t\t\t`varying vec2 vUv;\n\n\t\t\t\tuniform sampler2D maskTexture;\n\t\t\t\tuniform sampler2D edgeTexture1;\n\t\t\t\tuniform sampler2D edgeTexture2;\n\t\t\t\tuniform sampler2D patternTexture;\n\t\t\t\tuniform float edgeStrength;\n\t\t\t\tuniform float edgeGlow;\n\t\t\t\tuniform bool usePatternTexture;\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec4 edgeValue1 = texture2D(edgeTexture1, vUv);\n\t\t\t\t\tvec4 edgeValue2 = texture2D(edgeTexture2, vUv);\n\t\t\t\t\tvec4 maskColor = texture2D(maskTexture, vUv);\n\t\t\t\t\tvec4 patternColor = texture2D(patternTexture, 6.0 * vUv);\n\t\t\t\t\tfloat visibilityFactor = 1.0 - maskColor.g > 0.0 ? 1.0 : 0.5;\n\t\t\t\t\tvec4 edgeValue = edgeValue1 + edgeValue2 * edgeGlow;\n\t\t\t\t\tvec4 finalColor = edgeStrength * maskColor.r * edgeValue;\n\t\t\t\t\tif(usePatternTexture)\n\t\t\t\t\t\tfinalColor += + visibilityFactor * (1.0 - maskColor.r) * (1.0 - patternColor.r);\n\t\t\t\t\tgl_FragColor = finalColor;\n\t\t\t\t}`,\n\t\t\tblending: AdditiveBlending,\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\ttransparent: true\n\t\t} );\n\n\t}\n\n}\n\nOutlinePass.BlurDirectionX = new Vector2( 1.0, 0.0 );\nOutlinePass.BlurDirectionY = new Vector2( 0.0, 1.0 );\n\nexport { OutlinePass };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}