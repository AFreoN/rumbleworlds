{"ast":null,"code":"var _jsxFileName = \"D:\\\\Others\\\\Three js\\\\rumbleworlds-master\\\\src\\\\components\\\\Home\\\\IdleCharacter\\\\IdleCharacter.jsx\",\n  _s = $RefreshSig$();\nimport { useRef, useEffect } from \"react\";\nimport * as THREE from \"three\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader.js\";\n// import rumblerModel from \"assets/home/characters/rumbler_yellow_idle.gltf\";\n// import rumblerModel from \"assets/home/characters/rumbler_boxer_cleaned.glb\";\nimport rumblerModel from \"assets/home/characters/rumbler_boxer_no_tex.glb\";\n// import rumblerModel from \"assets/home/characters/rumbler_boxer_all512.glb\";\n\n//1024x1024 textures\nimport bodyTex from \"assets/home/characters/boxer_textures/SportsSet_YellowRumbler_BaseColor_01.png\";\nimport sportsTex from \"assets/home/characters/boxer_textures/SportSet_BaseColor.jpg\";\nimport projectorHoloColorTex from \"assets/home/characters/boxer_textures/hologram_projection_tex.png\";\nimport projectorHoloEmissionTex from \"assets/home/characters/boxer_textures/hologram_projection_tex.001.png\";\nimport boxerTex from \"assets/home/characters/boxer_textures/BoxerSet_BaseColor.png\";\n\n//512x512 textures\n// import bodyTex from \"assets/home/characters/boxer_textures/SportsSet_YellowRumbler_BaseColor_01_512.png\"\n// import sportsTex from \"assets/home/characters/boxer_textures/SportSet_BaseColor_512.png\"\n// import projectorHoloColorTex from \"assets/home/characters/boxer_textures/hologram_projection_tex_512.png\"\n// import projectorHoloEmissionTex from \"assets/home/characters/boxer_textures/hologram_projection_tex_512.001.png\"\n// import boxerTex from \"assets/home/characters/boxer_textures/BoxerSet_BaseColor_512.png\"\nimport \"./idle.scss\";\nimport { MathUtils } from \"three\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar modelLoaded = false;\nfunction IdleCharacter() {\n  _s();\n  const ref = useRef();\n  useEffect(() => {\n    let mixers = [];\n    var mixer;\n    let camera;\n    const manager = new THREE.LoadingManager();\n    const clock = new THREE.Clock();\n    const renderer = new THREE.WebGLRenderer({\n      alpha: true,\n      antialias: true\n    });\n    renderer.setClearColor(0x000000, 0);\n    let scene;\n    let rumbler;\n    const current = ref.current;\n    let width = current.clientWidth; // or window.innerWidth;\n    let height = current.clientHeight; // = window.innerHeight for full screen\n    camera = new THREE.PerspectiveCamera(55, width / height, 0.1, 1000);\n    const init = () => {\n      scene = new THREE.Scene();\n      // camera.position.set(0, 2.8, 8);\n      camera.position.set(0, 3.4, 8);\n      // camera.rotation.set(MathUtils.degToRad(10),0,0);\n      camera.rotation.set(MathUtils.degToRad(0), 0, 0);\n      //   camera.position.multiplyScalar(30);\n\n      //   camera.rotation.set(50, 0, 0);\n\n      renderer.shadowMap.enabled = true;\n      // renderer.outputEncoding = THREE.sRGBEncoding;\n      // renderer.setClearColor(0xffffff, 0);\n      // scene.background = new THREE.Color(0x999999);\n\n      // scene.background = new THREE.Color().setHSL(0.6, 0, 1);\n      renderer.setSize(width, height);\n      // document.body.appendChild( renderer.domElement );\n      // use ref as a mount point of the Three.js scene instead of the document.body\n      current.appendChild(renderer.domElement);\n\n      // add light\n      // scene.fog = new THREE.Fog(0xa0a0a0, 1, 2000);\n      scene.fog = new THREE.Fog(scene.background, 1, 200);\n      const hemiLight = new THREE.HemisphereLight(0xffeeb1, 0x080820, 1);\n      scene.add(hemiLight);\n      const amblight = new THREE.AmbientLight(0x080820, 0.5);\n      scene.add(amblight);\n\n      // add to show light helper\n      /*const hemiLightHelper = new THREE.HemisphereLightHelper(hemiLight, 10);\r\n      scene.add(hemiLightHelper);\r\n      */\n\n      renderer.toneMapping = THREE.ReinhardToneMapping;\n      renderer.toneMappingExposure = 1.6;\n      renderer.shadowMap.enabled = true;\n\n      //Blue rim light\n      const dirLight = new THREE.DirectionalLight(0x2fcaf5, 5);\n      //dirLight.color.setHSL(0.1, 1, 0.95);\n      // dirLight.position.multiplyScalar(30);\n\n      const d = 200;\n      dirLight.position.set(1.5, -0.2, -2.5);\n      // dirLight.position.multiplyScalar(1000);\n\n      dirLight.castShadow = true;\n      dirLight.shadow.camera.top = d;\n      dirLight.shadow.camera.bottom = -d;\n      dirLight.shadow.camera.left = -d;\n      dirLight.shadow.camera.right = d;\n      // dirLight.shadow.camera.near = 0.1;\n      // dirLight.shadow.camera.far = 100;\n\n      dirLight.shadow.camera.far = 35000;\n      dirLight.shadow.bias = -0.0001;\n      scene.add(dirLight);\n\n      //red rim light\n      const dirlight2 = new THREE.DirectionalLight(0xed2f2f, 5);\n      // dirlight2.position.multiplyScalar(30);\n\n      dirlight2.position.set(-1.5, -0.1, -0.5);\n      // dirlight2.position.multiplyScalar(1000);\n\n      dirlight2.castShadow = true;\n      dirlight2.shadow.camera.top = d;\n      dirlight2.shadow.camera.bottom = -d;\n      dirlight2.shadow.camera.left = -d;\n      dirlight2.shadow.camera.right = d;\n      dirlight2.shadow.camera.far = 35000;\n      dirlight2.shadow.bias = -0.0001;\n      scene.add(dirlight2);\n\n      //White top light\n      const dirlight3 = new THREE.DirectionalLight(0xffffff, 4);\n      // dirlight3.position.multiplyScalar(30);\n\n      dirlight3.position.set(-2.5, 15, 4);\n      // dirlight3.position.multiplyScalar(1000);\n\n      dirlight3.castShadow = true;\n      dirlight3.shadow.camera.top = d;\n      dirlight3.shadow.camera.bottom = -d;\n      dirlight3.shadow.camera.left = -d;\n      dirlight3.shadow.camera.right = d;\n      dirlight3.shadow.camera.far = 35000;\n      dirlight3.shadow.bias = -0.0001;\n      scene.add(dirlight3);\n      const dirLightTarget = new THREE.Object3D();\n      dirLightTarget.position.set(0, 0, 0);\n      scene.add(dirLightTarget);\n      dirLight.target = dirLightTarget;\n      dirlight2.target = dirLightTarget;\n      dirlight3.target = dirLightTarget;\n      renderer.domElement.style.display = \"none\";\n\n      // add to show light helper\n      // const dirLightHelper = new THREE.DirectionalLightHelper(dirLight, 10);\n      // scene.add(dirLightHelper);\n\n      // load model\n      const loader = new GLTFLoader(manager);\n      loader.load(rumblerModel, function (object) {\n        rumbler = object.scene;\n        rumbler.position.set(0, 0.6, 0);\n        rumbler.scale.set(10, 10, 10);\n        rumbler.rotation.set(0, MathUtils.degToRad(0), 0);\n        // console.log(\"IdleCharacter loaded\");\n\n        mixer = new THREE.AnimationMixer(rumbler);\n        const action = mixer.clipAction(object.animations[0]);\n        action.play();\n        mixers.push(mixer);\n        const texmanager = new THREE.LoadingManager();\n        const texLoader = new THREE.TextureLoader(texmanager);\n        const bodyMat = new THREE.MeshStandardMaterial({\n          map: texLoader.load(bodyTex, tex => {\n            tex.flipY = false;\n            tex.encoding = THREE.sRGBEncoding;\n          }),\n          name: 'bodyMat'\n        });\n        const boxerMat = new THREE.MeshStandardMaterial({\n          map: texLoader.load(boxerTex, tex => {\n            tex.flipY = false;\n            tex.encoding = THREE.sRGBEncoding;\n          }),\n          name: 'boxerMat'\n        });\n        const sportsMat = new THREE.MeshStandardMaterial({\n          map: texLoader.load(sportsTex, tex => {\n            tex.flipY = false;\n            tex.encoding = THREE.sRGBEncoding;\n          }),\n          name: 'sportsMat'\n        });\n        const holoMat = new THREE.MeshBasicMaterial({\n          map: texLoader.load(projectorHoloColorTex, tex => {\n            tex.flipY = false;\n            tex.encoding = THREE.sRGBEncoding;\n          }),\n          // emissiveIntensity : 2,\n          transparent: true,\n          name: 'holoMat'\n        });\n        texmanager.onLoad = () => {\n          bodyMat.needsUpdate = true;\n          boxerMat.needsUpdate = true;\n          sportsMat.needsUpdate = true;\n          holoMat.needsUpdate = true;\n          const changeTextures = true;\n          rumbler.traverse(function (child) {\n            if (child.isMesh) {\n              child.castShadow = true;\n              child.receiveShadow = true;\n              if (changeTextures) {\n                if (child.name === 'Body003' || child.name === 'Eye_L003' || child.name === 'Eye_R003' || child.name === 'EyeBrow_L003' || child.name === 'EyeBrow_R003' || child.name === 'Mouth003') {\n                  // console.log(child.material);\n                  child.material = bodyMat;\n                  child.material.needsUpdate = true;\n                  // console.log(child.material);\n                } else if (child.name === 'Glove_L002' || child.name === 'Glove_R002') {\n                  child.material = boxerMat;\n                  child.material.needsUpdate = true;\n                } else if (child.name === 'HeadSet009' || child.name === 'Tshit009' || child.name === 'SpotShoe_L002' || child.name === 'SpotShoe_R002') {\n                  child.material = sportsMat;\n                  child.material.needsUpdate = true;\n                } else if (child.name == \"pCone1006\") {\n                  child.material = holoMat;\n                  child.material.needsUpdate = true;\n                } else if (child.name == \"pCylinder9011\") {\n                  const baseMat = new THREE.MeshStandardMaterial({\n                    color: 0x00FFFF,\n                    roughness: 0.2,\n                    metalness: 0.7\n                  });\n                  child.material = baseMat;\n                }\n              }\n              if (child.material.map) {\n                // child.material.map = null\n                // child.material.needsUpdate = true\n              }\n            }\n          });\n          render();\n          console.log(\"Idle Character loaded!!!\");\n        };\n        scene.add(rumbler);\n        modelLoaded = true;\n        renderer.domElement.style.display = \"block\";\n        renderer.compile(rumbler, camera);\n        renderer.render(scene, camera);\n        // setTimeout(() => {\n        // }, 2500);\n      });\n    };\n    init();\n    manager.onLoad = () => {\n      render();\n      animate();\n    };\n    const doc = document.getElementById('idlecharacter_model');\n    function isScrolledIntoView(el) {\n      var rect = el.getBoundingClientRect();\n      var elemTop = rect.top;\n      var elemBottom = rect.bottom;\n\n      // Only completely visible elements return true:\n      // var isVisible = (elemTop >= 0) && (elemBottom <= window.innerHeight);\n      var isVisible = elemTop < window.innerHeight && elemBottom >= 0;\n      // Partially visible elements return true:\n      //isVisible = elemTop < window.innerHeight && elemBottom >= 0;\n      return isVisible;\n    }\n\n    // animate\n    const animate = function () {\n      requestAnimationFrame(animate);\n      // characterChange();\n      if (isScrolledIntoView(doc) && modelLoaded) {\n        const delta = clock.getDelta();\n        // for (let i = 0; i < mixers.length; i++) {\n        //   mixers[i].update(delta);\n        // }\n        mixer.update(delta);\n        render();\n      }\n    };\n    const render = () => {\n      renderer.render(scene, camera);\n    };\n    const handleResize = () => {\n      width = ref.current.clientWidth;\n      height = ref.current.clientHeight;\n      // height = 500;\n      renderer.setSize(width, height);\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n      render();\n    };\n    window.addEventListener(\"resize\", handleResize);\n    return () => {\n      // Callback to cleanup three js, cancel animationFrame, etc\n\n      window.removeEventListener(\"resize\", handleResize);\n      current.removeChild(renderer.domElement);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: ref,\n    className: \"IdleCharacter\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 332,\n    columnNumber: 10\n  }, this);\n}\n_s(IdleCharacter, \"8uVE59eA/r6b92xF80p7sH8rXLk=\");\n_c = IdleCharacter;\nexport default IdleCharacter;\nvar _c;\n$RefreshReg$(_c, \"IdleCharacter\");","map":{"version":3,"names":["useRef","useEffect","THREE","GLTFLoader","rumblerModel","bodyTex","sportsTex","projectorHoloColorTex","projectorHoloEmissionTex","boxerTex","MathUtils","jsxDEV","_jsxDEV","modelLoaded","IdleCharacter","_s","ref","mixers","mixer","camera","manager","LoadingManager","clock","Clock","renderer","WebGLRenderer","alpha","antialias","setClearColor","scene","rumbler","current","width","clientWidth","height","clientHeight","PerspectiveCamera","init","Scene","position","set","rotation","degToRad","shadowMap","enabled","setSize","appendChild","domElement","fog","Fog","background","hemiLight","HemisphereLight","add","amblight","AmbientLight","toneMapping","ReinhardToneMapping","toneMappingExposure","dirLight","DirectionalLight","d","castShadow","shadow","top","bottom","left","right","far","bias","dirlight2","dirlight3","dirLightTarget","Object3D","target","style","display","loader","load","object","scale","AnimationMixer","action","clipAction","animations","play","push","texmanager","texLoader","TextureLoader","bodyMat","MeshStandardMaterial","map","tex","flipY","encoding","sRGBEncoding","name","boxerMat","sportsMat","holoMat","MeshBasicMaterial","transparent","onLoad","needsUpdate","changeTextures","traverse","child","isMesh","receiveShadow","material","baseMat","color","roughness","metalness","render","console","log","compile","animate","doc","document","getElementById","isScrolledIntoView","el","rect","getBoundingClientRect","elemTop","elemBottom","isVisible","window","innerHeight","requestAnimationFrame","delta","getDelta","update","handleResize","aspect","updateProjectionMatrix","addEventListener","removeEventListener","removeChild","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Others/Three js/rumbleworlds-master/src/components/Home/IdleCharacter/IdleCharacter.jsx"],"sourcesContent":["import { useRef, useEffect } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader.js\";\r\n// import rumblerModel from \"assets/home/characters/rumbler_yellow_idle.gltf\";\r\n// import rumblerModel from \"assets/home/characters/rumbler_boxer_cleaned.glb\";\r\nimport rumblerModel from \"assets/home/characters/rumbler_boxer_no_tex.glb\";\r\n// import rumblerModel from \"assets/home/characters/rumbler_boxer_all512.glb\";\r\n\r\n//1024x1024 textures\r\nimport bodyTex from \"assets/home/characters/boxer_textures/SportsSet_YellowRumbler_BaseColor_01.png\"\r\nimport sportsTex from \"assets/home/characters/boxer_textures/SportSet_BaseColor.jpg\"\r\nimport projectorHoloColorTex from \"assets/home/characters/boxer_textures/hologram_projection_tex.png\"\r\nimport projectorHoloEmissionTex from \"assets/home/characters/boxer_textures/hologram_projection_tex.001.png\"\r\nimport boxerTex from \"assets/home/characters/boxer_textures/BoxerSet_BaseColor.png\"\r\n\r\n//512x512 textures\r\n// import bodyTex from \"assets/home/characters/boxer_textures/SportsSet_YellowRumbler_BaseColor_01_512.png\"\r\n// import sportsTex from \"assets/home/characters/boxer_textures/SportSet_BaseColor_512.png\"\r\n// import projectorHoloColorTex from \"assets/home/characters/boxer_textures/hologram_projection_tex_512.png\"\r\n// import projectorHoloEmissionTex from \"assets/home/characters/boxer_textures/hologram_projection_tex_512.001.png\"\r\n// import boxerTex from \"assets/home/characters/boxer_textures/BoxerSet_BaseColor_512.png\"\r\nimport \"./idle.scss\";\r\nimport { MathUtils } from \"three\";\r\n\r\nvar modelLoaded = false;\r\n\r\nfunction IdleCharacter() {\r\n  const ref = useRef();\r\n\r\n  useEffect(() => {\r\n    let mixers = [];\r\n    var mixer;\r\n\r\n    let camera;\r\n\r\n    const manager = new THREE.LoadingManager();\r\n    const clock = new THREE.Clock();\r\n\r\n    const renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });\r\n    renderer.setClearColor(0x000000, 0);\r\n\r\n    let scene;\r\n    let rumbler;\r\n\r\n    const current = ref.current;\r\n\r\n    let width = current.clientWidth; // or window.innerWidth;\r\n    let height = current.clientHeight; // = window.innerHeight for full screen\r\n    camera = new THREE.PerspectiveCamera(55, width / height, 0.1, 1000);\r\n\r\n    const init = () => {\r\n      scene = new THREE.Scene();\r\n      // camera.position.set(0, 2.8, 8);\r\n      camera.position.set(0, 3.4, 8);\r\n      // camera.rotation.set(MathUtils.degToRad(10),0,0);\r\n      camera.rotation.set(MathUtils.degToRad(0), 0, 0);\r\n      //   camera.position.multiplyScalar(30);\r\n\r\n      //   camera.rotation.set(50, 0, 0);\r\n\r\n      renderer.shadowMap.enabled = true;\r\n      // renderer.outputEncoding = THREE.sRGBEncoding;\r\n      // renderer.setClearColor(0xffffff, 0);\r\n      // scene.background = new THREE.Color(0x999999);\r\n\r\n      // scene.background = new THREE.Color().setHSL(0.6, 0, 1);\r\n      renderer.setSize(width, height);\r\n      // document.body.appendChild( renderer.domElement );\r\n      // use ref as a mount point of the Three.js scene instead of the document.body\r\n      current.appendChild(renderer.domElement);\r\n\r\n      // add light\r\n      // scene.fog = new THREE.Fog(0xa0a0a0, 1, 2000);\r\n      scene.fog = new THREE.Fog(scene.background, 1, 200);\r\n      const hemiLight = new THREE.HemisphereLight(0xffeeb1, 0x080820, 1);\r\n      scene.add(hemiLight);\r\n\r\n      const amblight = new THREE.AmbientLight(0x080820, 0.5);\r\n      scene.add(amblight);\r\n\r\n      // add to show light helper\r\n      /*const hemiLightHelper = new THREE.HemisphereLightHelper(hemiLight, 10);\r\n      scene.add(hemiLightHelper);\r\n      */\r\n\r\n      renderer.toneMapping = THREE.ReinhardToneMapping;\r\n      renderer.toneMappingExposure = 1.6;\r\n      renderer.shadowMap.enabled = true;\r\n\r\n      //Blue rim light\r\n      const dirLight = new THREE.DirectionalLight(0x2fcaf5, 5);\r\n      //dirLight.color.setHSL(0.1, 1, 0.95);\r\n      // dirLight.position.multiplyScalar(30);\r\n\r\n      const d = 200;\r\n      dirLight.position.set(1.5, -0.2, -2.5);\r\n      // dirLight.position.multiplyScalar(1000);\r\n\r\n      dirLight.castShadow = true;\r\n\r\n      dirLight.shadow.camera.top = d;\r\n      dirLight.shadow.camera.bottom = -d;\r\n      dirLight.shadow.camera.left = -d;\r\n      dirLight.shadow.camera.right = d;\r\n      // dirLight.shadow.camera.near = 0.1;\r\n      // dirLight.shadow.camera.far = 100;\r\n\r\n      dirLight.shadow.camera.far = 35000;\r\n      dirLight.shadow.bias = -0.0001;\r\n      scene.add(dirLight);\r\n\r\n      //red rim light\r\n      const dirlight2 = new THREE.DirectionalLight(0xed2f2f, 5);\r\n      // dirlight2.position.multiplyScalar(30);\r\n\r\n      dirlight2.position.set(-1.5, -0.1, -0.5);\r\n      // dirlight2.position.multiplyScalar(1000);\r\n\r\n      dirlight2.castShadow = true;\r\n      dirlight2.shadow.camera.top = d;\r\n      dirlight2.shadow.camera.bottom = -d;\r\n      dirlight2.shadow.camera.left = -d;\r\n      dirlight2.shadow.camera.right = d;\r\n\r\n      dirlight2.shadow.camera.far = 35000;\r\n      dirlight2.shadow.bias = -0.0001;\r\n      scene.add(dirlight2);\r\n\r\n      //White top light\r\n      const dirlight3 = new THREE.DirectionalLight(0xffffff, 4);\r\n      // dirlight3.position.multiplyScalar(30);\r\n\r\n      dirlight3.position.set(-2.5, 15, 4);\r\n      // dirlight3.position.multiplyScalar(1000);\r\n\r\n      dirlight3.castShadow = true;\r\n      dirlight3.shadow.camera.top = d;\r\n      dirlight3.shadow.camera.bottom = -d;\r\n      dirlight3.shadow.camera.left = -d;\r\n      dirlight3.shadow.camera.right = d;\r\n\r\n      dirlight3.shadow.camera.far = 35000;\r\n      dirlight3.shadow.bias = -0.0001;\r\n      scene.add(dirlight3);\r\n\r\n      const dirLightTarget = new THREE.Object3D();\r\n      dirLightTarget.position.set(0, 0, 0);\r\n      scene.add(dirLightTarget);\r\n\r\n      dirLight.target = dirLightTarget;\r\n      dirlight2.target = dirLightTarget;\r\n      dirlight3.target = dirLightTarget;\r\n\r\n      renderer.domElement.style.display = \"none\";\r\n\r\n      // add to show light helper\r\n      // const dirLightHelper = new THREE.DirectionalLightHelper(dirLight, 10);\r\n      // scene.add(dirLightHelper);\r\n\r\n      // load model\r\n      const loader = new GLTFLoader(manager);\r\n\r\n      loader.load(rumblerModel, function (object) {\r\n        rumbler = object.scene;\r\n        rumbler.position.set(0, 0.6, 0);\r\n        rumbler.scale.set(10, 10, 10);\r\n        rumbler.rotation.set(0, MathUtils.degToRad(0), 0);\r\n        // console.log(\"IdleCharacter loaded\");\r\n\r\n        mixer = new THREE.AnimationMixer(rumbler);\r\n        const action = mixer.clipAction(object.animations[0]);\r\n        action.play();\r\n        mixers.push(mixer);\r\n\r\n        const texmanager = new THREE.LoadingManager();\r\n        const texLoader = new THREE.TextureLoader(texmanager); \r\n\r\n        const bodyMat = new THREE.MeshStandardMaterial({\r\n            map: texLoader.load( bodyTex, (tex) => {\r\n            tex.flipY = false\r\n            tex.encoding = THREE.sRGBEncoding\r\n            } ),\r\n            name:'bodyMat'\r\n        })\r\n        const boxerMat = new THREE.MeshStandardMaterial({\r\n            map: texLoader.load( boxerTex, (tex) => {\r\n            tex.flipY = false\r\n            tex.encoding = THREE.sRGBEncoding\r\n            } ),\r\n            name:'boxerMat'\r\n        })\r\n        const sportsMat = new THREE.MeshStandardMaterial({\r\n            map: texLoader.load( sportsTex, (tex) => {\r\n            tex.flipY = false\r\n            tex.encoding = THREE.sRGBEncoding\r\n            } ),\r\n            name:'sportsMat'\r\n        })\r\n        const holoMat = new THREE.MeshBasicMaterial({\r\n          map : texLoader.load( projectorHoloColorTex, (tex) => {\r\n            tex.flipY = false\r\n            tex.encoding = THREE.sRGBEncoding\r\n          }),\r\n          // emissiveIntensity : 2,\r\n          transparent : true,\r\n          name: 'holoMat'\r\n        })\r\n        texmanager.onLoad = () => { \r\n          bodyMat.needsUpdate = true;\r\n          boxerMat.needsUpdate = true;\r\n          sportsMat.needsUpdate = true;\r\n          holoMat.needsUpdate = true;\r\n          const changeTextures = true\r\n  \r\n  \r\n          rumbler.traverse(function (child) {\r\n            if (child.isMesh) {\r\n              child.castShadow = true;\r\n              child.receiveShadow = true;\r\n  \r\n              if(changeTextures){\r\n                if(child.name === 'Body003' \r\n                || child.name === 'Eye_L003' \r\n                || child.name === 'Eye_R003' \r\n                || child.name === 'EyeBrow_L003'\r\n                || child.name === 'EyeBrow_R003'\r\n                || child.name === 'Mouth003') {\r\n                  // console.log(child.material);\r\n                  child.material = bodyMat\r\n                  child.material.needsUpdate = true\r\n                  // console.log(child.material);\r\n                }\r\n                else if (child.name === 'Glove_L002' || child.name === 'Glove_R002'){\r\n                  child.material = boxerMat\r\n                  child.material.needsUpdate = true\r\n                }\r\n                else if (child.name === 'HeadSet009' || child.name === 'Tshit009' || child.name === 'SpotShoe_L002' || child.name === 'SpotShoe_R002'){\r\n                  child.material = sportsMat\r\n                  child.material.needsUpdate = true\r\n                }\r\n                else if(child.name == \"pCone1006\"){\r\n                  child.material = holoMat\r\n                  child.material.needsUpdate = true\r\n                }\r\n                else if(child.name == \"pCylinder9011\"){\r\n                  const baseMat = new THREE.MeshStandardMaterial({color : 0x00FFFF, roughness : 0.2, metalness : 0.7});\r\n                  child.material = baseMat;\r\n                }\r\n              }\r\n              \r\n  \r\n              if (child.material.map) {\r\n                // child.material.map = null\r\n                // child.material.needsUpdate = true\r\n              }\r\n            }\r\n          });\r\n          render();\r\n          console.log(\"Idle Character loaded!!!\"); \r\n        }\r\n\r\n        scene.add(rumbler);\r\n        modelLoaded = true;\r\n        renderer.domElement.style.display = \"block\";\r\n        renderer.compile(rumbler,camera)\r\n        renderer.render(scene,camera);\r\n        // setTimeout(() => {\r\n        // }, 2500);\r\n      });\r\n    };\r\n\r\n    init();\r\n\r\n    manager.onLoad = () => {\r\n      render();\r\n      animate();\r\n    };\r\n\r\n    const doc = document.getElementById('idlecharacter_model');\r\n    function isScrolledIntoView(el) {\r\n      var rect = el.getBoundingClientRect();\r\n      var elemTop = rect.top;\r\n      var elemBottom = rect.bottom;\r\n  \r\n      // Only completely visible elements return true:\r\n      // var isVisible = (elemTop >= 0) && (elemBottom <= window.innerHeight);\r\n      var isVisible = elemTop < window.innerHeight && elemBottom >= 0;\r\n      // Partially visible elements return true:\r\n      //isVisible = elemTop < window.innerHeight && elemBottom >= 0;\r\n      return isVisible;\r\n    }\r\n\r\n    // animate\r\n    const animate = function () {\r\n      requestAnimationFrame(animate);\r\n      // characterChange();\r\n      if(isScrolledIntoView(doc) && modelLoaded){\r\n\r\n        const delta = clock.getDelta();\r\n        // for (let i = 0; i < mixers.length; i++) {\r\n          //   mixers[i].update(delta);\r\n          // }\r\n          mixer.update(delta);\r\n          render();\r\n      }\r\n    };\r\n\r\n    const render = () => {\r\n      renderer.render(scene, camera);\r\n    };\r\n\r\n    const handleResize = () => {\r\n      width = ref.current.clientWidth;\r\n      height = ref.current.clientHeight;\r\n      // height = 500;\r\n      renderer.setSize(width, height);\r\n      camera.aspect = width / height;\r\n      camera.updateProjectionMatrix();\r\n      render();\r\n    };\r\n\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    return () => {\r\n      // Callback to cleanup three js, cancel animationFrame, etc\r\n\r\n      window.removeEventListener(\"resize\", handleResize);\r\n      current.removeChild(renderer.domElement);\r\n    };\r\n  }, []);\r\n\r\n  return <div ref={ref} className=\"IdleCharacter\"></div>;\r\n}\r\n\r\nexport default IdleCharacter;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}