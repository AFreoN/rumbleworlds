{"ast":null,"code":"var _jsxFileName = \"D:\\\\Others\\\\Three js\\\\rumbleworlds-master\\\\src\\\\components\\\\Home\\\\Characters\\\\Characters.jsx\",\n  _s = $RefreshSig$();\nimport { useRef, useEffect } from \"react\";\nimport * as THREE from \"three\";\n// import { FBXLoader } from \"three/examples/jsm/loaders/FBXLoader.js\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader.js\";\nimport solarmyModel from \"assets/home/characters/solarmy_nonTex.glb\";\nimport solarmyDiffuse from \"assets/home/characters/Textures/solarmy_diffuse512.png\";\nimport solienModel from \"assets/home/characters/solien_nonTex.glb\";\nimport solienDiffuse from \"assets/home/characters/Textures/solien_diffuse512.png\";\nimport sunkModel from \"assets/home/characters/sunk_nonTex.glb\";\nimport sunkDiffuse from \"assets/home/characters/Textures/sunk_diffuse512.png\";\n// import rumblerModel from \"assets/home/characters/rumbler.glb\";\n// import rumblerModel from \"assets/home/characters/rumbler_cyclops_2048.glb\";\n// import rumblerModel from \"assets/home/characters/rumbler_cyclops_1024.glb\";\n// import rumblerModel from \"assets/home/characters/rumbler_cyclops_1024_512acc.glb\";\nimport rumblerModel from \"assets/home/characters/rumbler_tex512.glb\"; //rumbler_cyclops_256yellow_512all.glb\n\nimport solarianModel from \"assets/home/characters/solarian_nonTex.glb\"; //solarian.glb\nimport solarianDiffuse from \"assets/home/characters/Textures/solarian_diffuse512.jpg\";\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';\nimport { OutlinePass } from 'three/examples/jsm/postprocessing/OutlinePass.js';\n// import { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass.js';\n// import { FXAAShader } from 'three/examples/jsm/shaders/FXAAShader.js';\n\n// import solarmy_texture from \"assets/home/characters/solarmy_texture.png\";\nimport Solarmy_metalroughness_texture from \"assets/home/characters/Solarmy_MetalRoughMap.png\";\nimport Sunk_metalroughness_texture from \"assets/home/characters/Sunk_MetalRoughness.png\";\n// import solien_texture from \"assets/home/characters/solien_texture.png\";\n// import sunk_texture from \"assets/home/characters/sunk_texture.png\";\nimport \"./characters.scss\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet mixers = [];\nlet camera;\nconst manager = new THREE.LoadingManager();\n// load model\n//const loader = new FBXLoader(manager);\nconst gltfloader = new GLTFLoader(manager);\nconst textureLoader = new THREE.TextureLoader(manager);\nconst clock = new THREE.Clock();\nconst renderer = new THREE.WebGLRenderer({\n  alpha: true\n});\nrenderer.setClearColor(0x000000, 0);\nvar composer;\nvar selectedObjects = [];\nlet scene;\nlet characterList = [];\nlet solarmy, solien, sunk, rumbler, solarian;\nvar isPostProcessEnabled = false;\nconst characterCount = 5;\nvar loadedCount = 0;\nvar modelsLoaded = false;\nexport var firstFrameRendered = false;\nfunction setupScene() {\n  scene = new THREE.Scene();\n\n  //   camera.position.multiplyScalar(30);\n  //   camera.rotation.set(50, 0, 0);\n  renderer.toneMapping = THREE.ReinhardToneMapping;\n  renderer.toneMappingExposure = 1;\n  renderer.shadowMap.enabled = true;\n  // renderer.outputEncoding = THREE.sRGBEncoding;\n  // renderer.setClearColor(0xffffff, 0);\n  // scene.background = new THREE.Color(0x999999);\n  // scene.background = new THREE.Color().setHSL(0.6, 0, 1);\n\n  // document.body.appendChild( renderer.domElement );\n  // use ref as a mount point of the Three.js scene instead of the document.body\n\n  // add light\n  // scene.fog = new THREE.Fog(0xa0a0a0, 1, 2000);\n  scene.fog = new THREE.Fog(scene.background, 1, 20000);\n  const hemiLight = new THREE.HemisphereLight(0xffffff, 0x444444, 1);\n  hemiLight.position.set(0, 2, 0);\n  hemiLight.position.multiplyScalar(1000000);\n  // hemiLight.color.setHSL(0.6, 0.6, 0.6);\n  // hemiLight.groundColor.setHSL(0.095, 1, 0.75);\n  //scene.add(hemiLight);\n  // add to show light helper\n\n  const dirLight = new THREE.DirectionalLight(0xFFF6B6, 10); //prev 1.5 in default tone mapping\n  dirLight.color.setHSL(0.1, 1, 0.95);\n  dirLight.position.multiplyScalar(30);\n  const d = 200;\n  dirLight.position.set(-2, 2, 4); //prev (1, 2, 1)\n  dirLight.position.multiplyScalar(1000);\n  dirLight.castShadow = true;\n  dirLight.shadow.camera.top = d;\n  dirLight.shadow.camera.bottom = -d;\n  dirLight.shadow.camera.left = -d;\n  dirLight.shadow.camera.right = d;\n  // dirLight.shadow.camera.near = 0.1;\n  // dirLight.shadow.camera.far = 100;\n  dirLight.shadow.camera.far = 35000;\n  dirLight.shadow.bias = -0.0001;\n  scene.add(dirLight);\n  const spotLight = new THREE.SpotLight(0xaa0000);\n  spotLight.position.set(-10, 10, -5);\n  //scene.add( spotLight );\n\n  // const redPointLightRadius = 15;   //5\n  // const redpointLight = new THREE.PointLight( 0xff0000, redPointLightRadius , 40 );\n  // redpointLight.position.set( -7, 1, -1 );\n  // scene.add( redpointLight );\n\n  const rimLightSize = 30; //8\n  const rimPointLight = new THREE.PointLight(0x0033FF, rimLightSize, 40);\n  rimPointLight.position.set(10, 2, 0);\n  scene.add(rimPointLight);\n  const ambientLight = new THREE.AmbientLight(0xffffff, 0); // soft white light\n  scene.add(ambientLight);\n  renderer.domElement.style.display = \"none\";\n  // add to show light helper\n  // const dirLightHelper = new THREE.DirectionalLightHelper(dirLight, 10);\n  // scene.add(dirLightHelper);\n  // const groundGeo = new THREE.PlaneGeometry(100000, 100000);\n  // const groundMat = new THREE.MeshLambertMaterial({ color: 0xffffff });\n  // groundMat.color.setHSL(0.095, 1, 0.75);\n  // const ground = new THREE.Mesh(groundGeo, groundMat);\n  // ground.rotation.x = -Math.PI / 2;\n  // ground.receiveShadow = true;\n  // scene.add(ground);\n  LoadModels();\n}\nfunction setupPostProcessing(width, height) {\n  if (isPostProcessEnabled) {\n    return;\n  }\n  const params = {\n    edgeStrength: 5.0,\n    //3\n    edgeGlow: 0.0,\n    //0\n    edgeThickness: 1.0,\n    //1\n    pulsePeriod: 0,\n    rotate: false,\n    usePatternTexture: false\n  };\n  composer = new EffectComposer(renderer);\n  const renderPass = new RenderPass(scene, camera);\n  composer.addPass(renderPass);\n  const outlinePass = new OutlinePass(new THREE.Vector2(width, height), scene, camera);\n  outlinePass.edgeStrength = params.edgeStrength;\n  outlinePass.edgeGlow = params.edgeGlow;\n  outlinePass.edgeThickness = params.edgeThickness;\n  outlinePass.visibleEdgeColor.set(0x000000);\n  outlinePass.hiddenEdgeColor.set(0x111111);\n  outlinePass.selectedObjects = selectedObjects;\n  composer.addPass(outlinePass);\n  isPostProcessEnabled = true;\n}\nfunction LoadModels() {\n  gltfloader.load(rumblerModel, function (object) {\n    rumbler = object.scene;\n    // console.log(\"rumbler loaded\");\n    const mixer = new THREE.AnimationMixer(rumbler);\n    const action = mixer.clipAction(object.animations[0]);\n    action.play();\n    mixers.push(mixer);\n    selectedObjects.push(rumbler);\n    rumbler.traverse(child => {\n      if (child.isMesh) {\n        child.castShadow = true;\n        child.receiveShadow = true;\n      }\n    });\n    // selectedObjects.traverse((obj) => {\n    //   console.log('traversed properly');\n    // })\n    // const tgaLoader = new TGALoader(manager);\n\n    // const texture1 = tgaLoader.load(rumbler_cyclops_base_color);\n    // const texture2 = tgaLoader.load(rumbler_cyclops_texture);\n\n    // rumbler.traverse(function (child) {\n    //   if (child.isMesh) {\n    //     child.castShadow = true;\n    //     child.receiveShadow = true;\n    //     child.material.map = texture1;\n    //     child.material.needsUpdate = true;\n\n    //     if (\n    //       child.name.includes(\"Metal\") ||\n    //       child.name.includes(\"Armor\") ||\n    //       child.name.includes(\"Thumb\") ||\n    //       child.name.includes(\"ShoulderPad\") ||\n    //       child.name.includes(\"Index\") ||\n    //       child.name.includes(\"Pinky\")\n    //     ) {\n    //       var x = child.material.clone();\n    //       x.map = texture2;\n    //       x.needsUpdate = true;\n    //       child.material = x;\n    //     }\n    //   }\n    // });\n\n    // rumbler.rotation.set(0, -50, 0);\n    // rumbler.rotation.set(0, 1, 0);\n    rumbler.position.x = -0.5;\n    rumbler.position.y = -1.25;\n    rumbler.rotation.y = 0.3;\n    rumbler.scale.set(13, 13, 13); //prev 11\n    // rumbler.visible = false; \n\n    scene.add(rumbler);\n    characterList.push(rumbler);\n    mLoaded();\n  });\n  LoadRemainingModels();\n}\n_c = LoadModels;\nfunction LoadRemainingModels() {\n  gltfloader.load(solarmyModel, function (object) {\n    solarmy = object.scene;\n    // console.log('solarmy loaded');\n    const mixer = new THREE.AnimationMixer(solarmy);\n    const action = mixer.clipAction(object.animations[0]);\n    mixers.push(mixer);\n    action.play();\n    selectedObjects.push(solarmy);\n    const solarmyLoadManager = new THREE.LoadingManager();\n    const solarmyTexLoader = new THREE.TextureLoader(solarmyLoadManager);\n    // const solarmyTexLoader2 = new THREE.TextureLoader(solarmyLoadManager);\n    var diffuseTexture, roughmetalTexture;\n    solarmyTexLoader.load(Solarmy_metalroughness_texture, texture => {\n      texture.flipY = false;\n      texture.needsUpdate = true;\n      roughmetalTexture = texture;\n    });\n    solarmyTexLoader.load(solarmyDiffuse, texture => {\n      texture.flipY = false;\n      texture.encoding = THREE.sRGBEncoding;\n      texture.needsUpdate = true;\n      diffuseTexture = texture;\n    });\n    solarmyLoadManager.onLoad = () => {\n      solarmy.traverse(function (child) {\n        if (child.isMesh) {\n          child.castShadow = true;\n          child.receiveShadow = true;\n          // child.material.roughness = 0;\n          child.material.roughness = 0.9;\n          child.material.metalness = 1;\n          child.material.metalnessMap = roughmetalTexture;\n          child.material.roughnessMap = roughmetalTexture;\n          child.material.map = diffuseTexture;\n          child.material.needsUpdate = true;\n\n          // textureLoader.load(Solarmy_metalroughness_texture, (texture) => {\n          //   texture.flipY = false;\n          //   texture.needsUpdate = true;\n          //   child.material.metalnessMap = texture;\n          //   child.material.roughnessMap = texture;\n          //   child.material.needsUpdate = true;\n          // });\n          // textureLoader.load(solarmyDiffuse, (texture) => {\n          //   texture.flipY = false;\n          //   texture.encoding = THREE.sRGBEncoding;\n          //   texture.needsUpdate = true;\n          //   child.material.map = texture;\n          //   child.material.needsUpdate = true;\n          // })\n        }\n      });\n      mLoaded();\n    };\n    solarmy.position.set(-0.5, -1.5, 0);\n    solarmy.rotation.set(0, 0, 0);\n    solarmy.scale.set(3.6, 3.6, 3.6); //prev 3\n\n    solarmy.name = \"solarmy\";\n    characterList.push(solarmy);\n  });\n  gltfloader.load(solienModel, function (object) {\n    solien = object.scene;\n    // console.log('solien loaded');\n    const mixer = new THREE.AnimationMixer(solien);\n    const action = mixer.clipAction(object.animations[0]);\n    action.play();\n    mixers.push(mixer);\n    selectedObjects.push(solien);\n    textureLoader.load(solienDiffuse, texture => {\n      texture.flipY = false;\n      texture.encoding = THREE.sRGBEncoding;\n      solien.traverse(function (child) {\n        if (child.isMesh) {\n          child.castShadow = true;\n          child.receiveShadow = true;\n          child.material.roughness = 0.7;\n          child.material.metalness = 0.1;\n          child.material.map = texture;\n          child.material.needsUpdate = true;\n        }\n      });\n      // child.material.side = THREE.DoubleSide;\n      // child.material.dithering = true;\n      mLoaded();\n    });\n    solien.position.set(-0.5, -1.5, -0.6); //prev (0, 0.5, -0.6)\n    solien.rotation.set(0, Math.PI * 0.25, 0);\n    solien.scale.set(2, 2, 2); //prev (1.6, 1.6, 1.6)\n    // solien.visible = false;\n\n    characterList.push(solien);\n  });\n  gltfloader.load(sunkModel, function (object) {\n    sunk = object.scene;\n    // console.log('sunk loaded');\n    const mixer = new THREE.AnimationMixer(sunk);\n    const action = mixer.clipAction(object.animations[0]);\n    action.play();\n    mixers.push(mixer);\n    selectedObjects.push(sunk);\n    const sunkLoadManager = new THREE.LoadingManager();\n    const sunkTexLoader1 = new THREE.TextureLoader(sunkLoadManager);\n    const sunkTexLoader2 = new THREE.TextureLoader(sunkLoadManager);\n    var sunkRoughnessTexture, sunkDiffuseTexture;\n    sunkTexLoader1.load(Sunk_metalroughness_texture, texture => {\n      texture.flipY = false;\n      texture.encoding = THREE.sRGBEncoding;\n      texture.needsUpdate = true;\n      sunkRoughnessTexture = texture;\n    });\n    sunkTexLoader2.load(sunkDiffuse, texture => {\n      texture.flipY = false;\n      texture.encoding = THREE.sRGBEncoding;\n      texture.needsUpdate = true;\n      sunkDiffuseTexture = texture;\n    });\n    sunkLoadManager.onLoad = () => {\n      sunk.traverse(function (child) {\n        if (child.isMesh) {\n          child.material.roughness = 0.9;\n          child.material.metalness = 0.7;\n          child.material.metalnessMap = sunkRoughnessTexture;\n          child.material.roughnessMap = sunkRoughnessTexture;\n          child.material.map = sunkDiffuseTexture;\n          child.material.needsUpdate = true;\n\n          // textureLoader.load(Sunk_metalroughness_texture, (texture) => {\n          //   texture.flipY = false;\n          //   texture.needsUpdate = true;\n          //   child.material.metalnessMap = texture;\n          //   child.material.roughnessMap = texture;\n          //   child.material.needsUpdate = true;\n          // });\n          // textureLoader.load(sunkDiffuse, (texture) => {\n          //   texture.flipY = false;\n          //   texture.encoding = THREE.sRGBEncoding;\n          //   child.material.map = texture;\n          //   child.material.needsUpdate = true;\n          // })\n        }\n      });\n      mLoaded();\n    };\n\n    // sunk.rotation.set(0, -50, 0);\n    sunk.rotation.set(THREE.MathUtils.degToRad(5), Math.PI * 0.1, 0);\n    sunk.position.set(-0.5, -2.7, -1.2); //prev (0,-0.5,-1)\n    const scale = 1.2; //1.2\n    sunk.scale.set(scale, scale, scale); //prev (1.2, 1.2, 1.2)\n    // sunk.visible = false;\n\n    characterList.push(sunk);\n  });\n  gltfloader.load(solarianModel, function (object) {\n    solarian = object.scene;\n    const mixer = new THREE.AnimationMixer(solarian);\n    const action = mixer.clipAction(object.animations[0]);\n    action.play();\n    mixers.push(mixer);\n    selectedObjects.push(solarian);\n    // console.log('solarian loaded');\n\n    var diffuseMap;\n    textureLoader.load(solarianDiffuse, texture => {\n      texture.flipY = false;\n      texture.encoding = THREE.sRGBEncoding;\n      texture.needsUpdate = true;\n      diffuseMap = texture;\n      solarian.traverse(function (child) {\n        if (child.isMesh) {\n          child.castShadow = true;\n          child.receiveShadow = true;\n          child.material.map = diffuseMap;\n          child.material.roughness = 0.4;\n          child.material.metalness = 0.2;\n          child.material.needsUpdate = true;\n          // textureLoader.load(solarian_texture, (texture) => {\n          //   child.material.map = texture;\n          //   child.material.needsUpdate = true;\n          // });\n        }\n      });\n      mLoaded();\n    });\n\n    // solarian.rotation.set(0, -50, 0);\n    solarian.rotation.set(0, 0.5, 0); //prev (0, 0.5, 0)\n    solarian.position.x = -0.25;\n    solarian.position.y = -0.5; //prev 0.7\n    solarian.scale.set(1.8, 1.8, 1.8); //prev (2,2,2)\n    // solarian.visible = false;\n\n    characterList.push(solarian);\n  });\n}\n_c2 = LoadRemainingModels;\nfunction mLoaded() {\n  loadedCount++;\n  if (loadedCount >= characterCount) {\n    renderer.domElement.style.display = \"block\";\n    modelsLoaded = true;\n    console.log(\"All characters loaded\");\n    // setTimeout(() => {\n\n    //   console.log(\"Timeout completed\");\n    // }, 10000);\n    // // composer.render();\n  }\n}\nsetupScene();\n// function sleep(milliseconds) {\n//   const date = Date.now();\n//   let currentDate = null;\n//   do {\n//     currentDate = Date.now();\n//   } while (currentDate - date < milliseconds);\n// }\n// console.log(\"before sleep\");\n// sleep(10000);\n// console.log(\"after sleep\");\n\nfunction Characters() {\n  _s();\n  const character = useSelector(state => state.characterSelect.character);\n  const ref = useRef();\n  useEffect(() => {\n    const current = ref.current;\n    let width = current.clientWidth; // or window.innerWidth;\n    let height = current.clientHeight; // = window.innerHeight for full screen\n\n    const init = () => {\n      camera = new THREE.PerspectiveCamera(90, width / height, 1, 100000);\n      camera.position.set(0, 2.5, 4);\n      renderer.setSize(width, height);\n      current.appendChild(renderer.domElement);\n      setupPostProcessing(width, height);\n      if (modelsLoaded === false) return;\n      if (character === 0) {\n        scene.add(rumbler);\n        scene.remove(solarmy);\n        scene.remove(solien);\n        scene.remove(sunk);\n        scene.remove(solarian);\n      }\n      if (character === 1) {\n        scene.remove(rumbler);\n        scene.add(solarmy);\n        scene.remove(solien);\n        scene.remove(sunk);\n        scene.remove(solarian);\n      }\n      if (character === 2) {\n        scene.remove(rumbler);\n        scene.remove(solarmy);\n        scene.add(solien);\n        scene.remove(sunk);\n        scene.remove(solarian);\n      }\n      if (character === 3) {\n        scene.remove(rumbler);\n        scene.remove(solarmy);\n        scene.remove(solien);\n        scene.add(sunk);\n        scene.remove(solarian);\n      }\n      if (character === 4) {\n        scene.remove(rumbler);\n        scene.remove(solarmy);\n        scene.remove(solien);\n        scene.remove(sunk);\n        scene.add(solarian);\n      }\n    };\n    init();\n    manager.onLoad = () => {\n      console.log(\"Calling Render\");\n      animate();\n    };\n\n    // animate\n    const animate = function () {\n      requestAnimationFrame(animate);\n      // characterChange();\n\n      if (isScrolledIntoView(doc) && modelsLoaded) {\n        const delta = clock.getDelta();\n        for (let i = 0; i < mixers.length; i++) {\n          mixers[i].update(delta);\n        }\n        render();\n      } else if (firstFrameRendered === false) {\n        const delta = clock.getDelta();\n        for (let i = 0; i < mixers.length; i++) {\n          mixers[i].update(delta);\n        }\n        render();\n      }\n    };\n    const doc = document.getElementById('character_model');\n    function isScrolledIntoView(el) {\n      var rect = el.getBoundingClientRect();\n      var elemTop = rect.top;\n      var elemBottom = rect.bottom;\n      var isVisible = elemTop < window.innerHeight && elemBottom >= 0;\n      return isVisible;\n    }\n    const render = () => {\n      //renderer.render(scene, camera);\n      composer.render();\n      if (!firstFrameRendered) {\n        firstFrameRendered = true;\n        console.log(\"First frame rendered\");\n      }\n    };\n    const handleResize = () => {\n      width = ref.current.clientWidth;\n      height = ref.current.clientHeight;\n      // height = 500;\n      renderer.setSize(width, height);\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n      render();\n    };\n    //#region Old props code\n    // props.store.subscribe((data) => {\n    //   console.log(data.characterSelect.character);\n    //   if (currentCharIndex === data.characterSelect.character) {\n    //     console.log(\"Same character\");\n    //     return;\n    //   }\n\n    //   for (let i = 0; i < characterList.length; i++) {\n    //     characterList[i].visible = false;\n    //     if (i === data.characterSelect.character) {\n    //       console.log(\"Change character!\");\n    //       characterList[i].visible = true;\n    //       currentCharIndex = i;\n    //     }\n    //   }\n    // });\n\n    // const characterChange = () => {\n    //   console.log(character.character);\n    //   if (currentCharIndex === character.character) {\n    //     console.log(\"Same character\");\n    //     return;\n    //   }\n    //   for (let i = 0; i < characterList.length; i++) {\n    //     characterList[i].visible = false;\n    //     if (i === character.character) {\n    //       console.log(\"Change character!\");\n    //       characterList[i].visible = true;\n    //       currentCharIndex = i;\n    //     }\n    //   }\n    // };\n    //#endregion\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => {\n      // Callback to cleanup three js, cancel animationFrame, etc\n\n      window.removeEventListener(\"resize\", handleResize);\n      current.removeChild(renderer.domElement);\n    };\n  }, [character]);\n\n  // console.log(\"returned character\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: ref,\n    className: \"Characters\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 638,\n    columnNumber: 10\n  }, this);\n}\n_s(Characters, \"WHltcsSKaJ+jq5wLW8Y6XzF/0II=\", false, function () {\n  return [useSelector];\n});\n_c3 = Characters;\nexport default Characters;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"LoadModels\");\n$RefreshReg$(_c2, \"LoadRemainingModels\");\n$RefreshReg$(_c3, \"Characters\");","map":{"version":3,"names":["useRef","useEffect","THREE","GLTFLoader","solarmyModel","solarmyDiffuse","solienModel","solienDiffuse","sunkModel","sunkDiffuse","rumblerModel","solarianModel","solarianDiffuse","EffectComposer","RenderPass","OutlinePass","Solarmy_metalroughness_texture","Sunk_metalroughness_texture","useSelector","jsxDEV","_jsxDEV","mixers","camera","manager","LoadingManager","gltfloader","textureLoader","TextureLoader","clock","Clock","renderer","WebGLRenderer","alpha","setClearColor","composer","selectedObjects","scene","characterList","solarmy","solien","sunk","rumbler","solarian","isPostProcessEnabled","characterCount","loadedCount","modelsLoaded","firstFrameRendered","setupScene","Scene","toneMapping","ReinhardToneMapping","toneMappingExposure","shadowMap","enabled","fog","Fog","background","hemiLight","HemisphereLight","position","set","multiplyScalar","dirLight","DirectionalLight","color","setHSL","d","castShadow","shadow","top","bottom","left","right","far","bias","add","spotLight","SpotLight","rimLightSize","rimPointLight","PointLight","ambientLight","AmbientLight","domElement","style","display","LoadModels","setupPostProcessing","width","height","params","edgeStrength","edgeGlow","edgeThickness","pulsePeriod","rotate","usePatternTexture","renderPass","addPass","outlinePass","Vector2","visibleEdgeColor","hiddenEdgeColor","load","object","mixer","AnimationMixer","action","clipAction","animations","play","push","traverse","child","isMesh","receiveShadow","x","y","rotation","scale","mLoaded","LoadRemainingModels","_c","solarmyLoadManager","solarmyTexLoader","diffuseTexture","roughmetalTexture","texture","flipY","needsUpdate","encoding","sRGBEncoding","onLoad","material","roughness","metalness","metalnessMap","roughnessMap","map","name","Math","PI","sunkLoadManager","sunkTexLoader1","sunkTexLoader2","sunkRoughnessTexture","sunkDiffuseTexture","MathUtils","degToRad","diffuseMap","_c2","console","log","Characters","_s","character","state","characterSelect","ref","current","clientWidth","clientHeight","init","PerspectiveCamera","setSize","appendChild","remove","animate","requestAnimationFrame","isScrolledIntoView","doc","delta","getDelta","i","length","update","render","document","getElementById","el","rect","getBoundingClientRect","elemTop","elemBottom","isVisible","window","innerHeight","handleResize","aspect","updateProjectionMatrix","addEventListener","removeEventListener","removeChild","className","fileName","_jsxFileName","lineNumber","columnNumber","_c3","$RefreshReg$"],"sources":["D:/Others/Three js/rumbleworlds-master/src/components/Home/Characters/Characters.jsx"],"sourcesContent":["import { useRef, useEffect } from \"react\";\r\nimport * as THREE from \"three\";\r\n// import { FBXLoader } from \"three/examples/jsm/loaders/FBXLoader.js\";\r\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader.js\";\r\n\r\nimport solarmyModel from \"assets/home/characters/solarmy_nonTex.glb\";\r\nimport solarmyDiffuse from \"assets/home/characters/Textures/solarmy_diffuse512.png\";\r\n\r\nimport solienModel from \"assets/home/characters/solien_nonTex.glb\";\r\nimport solienDiffuse from \"assets/home/characters/Textures/solien_diffuse512.png\";\r\n\r\nimport sunkModel from \"assets/home/characters/sunk_nonTex.glb\";\r\nimport sunkDiffuse from \"assets/home/characters/Textures/sunk_diffuse512.png\";\r\n// import rumblerModel from \"assets/home/characters/rumbler.glb\";\r\n// import rumblerModel from \"assets/home/characters/rumbler_cyclops_2048.glb\";\r\n// import rumblerModel from \"assets/home/characters/rumbler_cyclops_1024.glb\";\r\n// import rumblerModel from \"assets/home/characters/rumbler_cyclops_1024_512acc.glb\";\r\nimport rumblerModel from \"assets/home/characters/rumbler_tex512.glb\"; //rumbler_cyclops_256yellow_512all.glb\r\n\r\nimport solarianModel from \"assets/home/characters/solarian_nonTex.glb\";  //solarian.glb\r\nimport solarianDiffuse from \"assets/home/characters/Textures/solarian_diffuse512.jpg\"\r\n\r\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';\r\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';\r\nimport { OutlinePass } from 'three/examples/jsm/postprocessing/OutlinePass.js';\r\n// import { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass.js';\r\n// import { FXAAShader } from 'three/examples/jsm/shaders/FXAAShader.js';\r\n\r\n// import solarmy_texture from \"assets/home/characters/solarmy_texture.png\";\r\nimport Solarmy_metalroughness_texture from \"assets/home/characters/Solarmy_MetalRoughMap.png\";\r\nimport Sunk_metalroughness_texture from \"assets/home/characters/Sunk_MetalRoughness.png\";\r\n// import solien_texture from \"assets/home/characters/solien_texture.png\";\r\n// import sunk_texture from \"assets/home/characters/sunk_texture.png\";\r\nimport \"./characters.scss\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nlet mixers = [];\r\nlet camera;\r\nconst manager = new THREE.LoadingManager();\r\n// load model\r\n//const loader = new FBXLoader(manager);\r\nconst gltfloader = new GLTFLoader(manager);\r\nconst textureLoader = new THREE.TextureLoader(manager);\r\n\r\nconst clock = new THREE.Clock();\r\n\r\nconst renderer = new THREE.WebGLRenderer({ alpha: true });\r\nrenderer.setClearColor(0x000000, 0);\r\n\r\nvar composer;\r\nvar selectedObjects  = [];\r\n\r\nlet scene;\r\nlet characterList = [];\r\nlet solarmy, solien, sunk, rumbler, solarian;\r\n\r\nvar isPostProcessEnabled = false;\r\nconst characterCount = 5;\r\nvar loadedCount = 0;\r\nvar modelsLoaded = false;\r\nexport var firstFrameRendered = false;\r\n\r\nfunction setupScene(){\r\n  scene = new THREE.Scene();\r\n\r\n    //   camera.position.multiplyScalar(30);\r\n  //   camera.rotation.set(50, 0, 0);\r\n  renderer.toneMapping = THREE.ReinhardToneMapping;\r\n  renderer.toneMappingExposure = 1;\r\n  renderer.shadowMap.enabled = true;\r\n  // renderer.outputEncoding = THREE.sRGBEncoding;\r\n  // renderer.setClearColor(0xffffff, 0);\r\n  // scene.background = new THREE.Color(0x999999);\r\n  // scene.background = new THREE.Color().setHSL(0.6, 0, 1);\r\n\r\n  // document.body.appendChild( renderer.domElement );\r\n  // use ref as a mount point of the Three.js scene instead of the document.body\r\n\r\n  // add light\r\n  // scene.fog = new THREE.Fog(0xa0a0a0, 1, 2000);\r\n  scene.fog = new THREE.Fog(scene.background, 1, 20000);\r\n  const hemiLight = new THREE.HemisphereLight(0xffffff, 0x444444, 1);\r\n  hemiLight.position.set(0, 2, 0);\r\n  hemiLight.position.multiplyScalar(1000000);\r\n  // hemiLight.color.setHSL(0.6, 0.6, 0.6);\r\n  // hemiLight.groundColor.setHSL(0.095, 1, 0.75);\r\n  //scene.add(hemiLight);\r\n  // add to show light helper\r\n\r\n  const dirLight = new THREE.DirectionalLight(0xFFF6B6, 10);   //prev 1.5 in default tone mapping\r\n  dirLight.color.setHSL(0.1, 1, 0.95);\r\n  dirLight.position.multiplyScalar(30);\r\n  const d = 200;\r\n  dirLight.position.set(-2, 2, 4);   //prev (1, 2, 1)\r\n  dirLight.position.multiplyScalar(1000);\r\n  dirLight.castShadow = true;\r\n  dirLight.shadow.camera.top = d;\r\n  dirLight.shadow.camera.bottom = -d;\r\n  dirLight.shadow.camera.left = -d;\r\n  dirLight.shadow.camera.right = d;\r\n  // dirLight.shadow.camera.near = 0.1;\r\n  // dirLight.shadow.camera.far = 100;\r\n  dirLight.shadow.camera.far = 35000;\r\n  dirLight.shadow.bias = -0.0001;\r\n  scene.add(dirLight);\r\n  \r\n  const spotLight = new THREE.SpotLight( 0xaa0000 );\r\n  spotLight.position.set( -10, 10, -5 );\r\n  //scene.add( spotLight );\r\n\r\n  // const redPointLightRadius = 15;   //5\r\n  // const redpointLight = new THREE.PointLight( 0xff0000, redPointLightRadius , 40 );\r\n  // redpointLight.position.set( -7, 1, -1 );\r\n  // scene.add( redpointLight );\r\n\r\n  const rimLightSize = 30;   //8\r\n  const rimPointLight = new THREE.PointLight( 0x0033FF, rimLightSize, 40);\r\n  rimPointLight.position.set( 10, 2, 0);\r\n  scene.add( rimPointLight );\r\n\r\n  const ambientLight = new THREE.AmbientLight( 0xffffff, 0 ); // soft white light\r\n  scene.add( ambientLight );\r\n\r\n  renderer.domElement.style.display = \"none\";\r\n  // add to show light helper\r\n  // const dirLightHelper = new THREE.DirectionalLightHelper(dirLight, 10);\r\n  // scene.add(dirLightHelper);\r\n  // const groundGeo = new THREE.PlaneGeometry(100000, 100000);\r\n  // const groundMat = new THREE.MeshLambertMaterial({ color: 0xffffff });\r\n  // groundMat.color.setHSL(0.095, 1, 0.75);\r\n  // const ground = new THREE.Mesh(groundGeo, groundMat);\r\n  // ground.rotation.x = -Math.PI / 2;\r\n  // ground.receiveShadow = true;\r\n  // scene.add(ground);\r\n  LoadModels();\r\n}\r\n\r\nfunction setupPostProcessing(width, height){\r\n  if(isPostProcessEnabled){\r\n    return;\r\n  }\r\n\r\n  const params = {\r\n    edgeStrength: 5.0,  //3\r\n    edgeGlow: 0.0,  //0\r\n    edgeThickness: 1.0, //1\r\n    pulsePeriod: 0,\r\n    rotate: false,\r\n    usePatternTexture: false\r\n  };\r\n\r\n  composer = new EffectComposer( renderer );\r\n\r\n\tconst renderPass = new RenderPass( scene, camera );\r\n\tcomposer.addPass( renderPass );\r\n\r\n\tconst outlinePass = new OutlinePass( new THREE.Vector2( width, height ), scene, camera );\r\n  outlinePass.edgeStrength = params.edgeStrength;\r\n  outlinePass.edgeGlow = params.edgeGlow;\r\n  outlinePass.edgeThickness = params.edgeThickness;\r\n  outlinePass.visibleEdgeColor.set(0x000000);\r\n  outlinePass.hiddenEdgeColor.set(0x111111);\r\n  outlinePass.selectedObjects = selectedObjects;\r\n\tcomposer.addPass( outlinePass );\r\n\r\n  isPostProcessEnabled = true;\r\n}\r\n\r\nfunction LoadModels(){\r\n  \r\n  gltfloader.load(rumblerModel, function (object) {\r\n    rumbler = object.scene;\r\n    // console.log(\"rumbler loaded\");\r\n    const mixer = new THREE.AnimationMixer(rumbler);\r\n    const action = mixer.clipAction(object.animations[0]);\r\n    action.play();\r\n    mixers.push(mixer);\r\n    selectedObjects.push(rumbler);\r\n\r\n    rumbler.traverse((child) => {\r\n      if(child.isMesh){\r\n        child.castShadow = true;\r\n        child.receiveShadow = true;\r\n      }\r\n    });\r\n    // selectedObjects.traverse((obj) => {\r\n    //   console.log('traversed properly');\r\n    // })\r\n    // const tgaLoader = new TGALoader(manager);\r\n\r\n    // const texture1 = tgaLoader.load(rumbler_cyclops_base_color);\r\n    // const texture2 = tgaLoader.load(rumbler_cyclops_texture);\r\n\r\n    // rumbler.traverse(function (child) {\r\n    //   if (child.isMesh) {\r\n    //     child.castShadow = true;\r\n    //     child.receiveShadow = true;\r\n    //     child.material.map = texture1;\r\n    //     child.material.needsUpdate = true;\r\n\r\n    //     if (\r\n    //       child.name.includes(\"Metal\") ||\r\n    //       child.name.includes(\"Armor\") ||\r\n    //       child.name.includes(\"Thumb\") ||\r\n    //       child.name.includes(\"ShoulderPad\") ||\r\n    //       child.name.includes(\"Index\") ||\r\n    //       child.name.includes(\"Pinky\")\r\n    //     ) {\r\n    //       var x = child.material.clone();\r\n    //       x.map = texture2;\r\n    //       x.needsUpdate = true;\r\n    //       child.material = x;\r\n    //     }\r\n    //   }\r\n    // });\r\n\r\n    // rumbler.rotation.set(0, -50, 0);\r\n    // rumbler.rotation.set(0, 1, 0);\r\n    rumbler.position.x = -0.5;\r\n    rumbler.position.y = -1.25;\r\n    rumbler.rotation.y = 0.3;\r\n    rumbler.scale.set(13, 13, 13);  //prev 11\r\n    // rumbler.visible = false; \r\n\r\n    scene.add(rumbler);\r\n    characterList.push(rumbler);\r\n    mLoaded();\r\n  });\r\n  \r\n  LoadRemainingModels();\r\n}\r\nfunction LoadRemainingModels(){\r\n  \r\n  gltfloader.load(solarmyModel, function (object) {\r\n    solarmy = object.scene;\r\n    // console.log('solarmy loaded');\r\n    const mixer = new THREE.AnimationMixer(solarmy);\r\n    const action = mixer.clipAction(object.animations[0]);\r\n    mixers.push(mixer);\r\n    action.play();\r\n    selectedObjects.push(solarmy);\r\n\r\n    const solarmyLoadManager = new THREE.LoadingManager();\r\n    const solarmyTexLoader = new THREE.TextureLoader(solarmyLoadManager);\r\n    // const solarmyTexLoader2 = new THREE.TextureLoader(solarmyLoadManager);\r\n    var diffuseTexture, roughmetalTexture;\r\n\r\n    solarmyTexLoader.load(Solarmy_metalroughness_texture, (texture) => {\r\n      texture.flipY = false;\r\n      texture.needsUpdate = true;\r\n      roughmetalTexture = texture;\r\n    });\r\n    \r\n    solarmyTexLoader.load(solarmyDiffuse, (texture) => {\r\n      texture.flipY = false;\r\n      texture.encoding = THREE.sRGBEncoding;\r\n      texture.needsUpdate = true;\r\n      diffuseTexture = texture;\r\n    })\r\n\r\n    solarmyLoadManager.onLoad = () => {\r\n\r\n      solarmy.traverse(function (child) {\r\n        if (child.isMesh) {\r\n          child.castShadow = true;\r\n          child.receiveShadow = true;\r\n          // child.material.roughness = 0;\r\n          child.material.roughness = 0.9;\r\n          child.material.metalness = 1;\r\n          child.material.metalnessMap = roughmetalTexture;\r\n          child.material.roughnessMap = roughmetalTexture;\r\n          child.material.map = diffuseTexture;\r\n          child.material.needsUpdate = true;\r\n\r\n          // textureLoader.load(Solarmy_metalroughness_texture, (texture) => {\r\n          //   texture.flipY = false;\r\n          //   texture.needsUpdate = true;\r\n          //   child.material.metalnessMap = texture;\r\n          //   child.material.roughnessMap = texture;\r\n          //   child.material.needsUpdate = true;\r\n          // });\r\n          // textureLoader.load(solarmyDiffuse, (texture) => {\r\n          //   texture.flipY = false;\r\n          //   texture.encoding = THREE.sRGBEncoding;\r\n          //   texture.needsUpdate = true;\r\n          //   child.material.map = texture;\r\n          //   child.material.needsUpdate = true;\r\n          // })\r\n        }\r\n      });\r\n\r\n      mLoaded();\r\n    }\r\n\r\n\r\n    solarmy.position.set(-0.5, -1.5, 0);\r\n\r\n    solarmy.rotation.set(0, 0, 0);\r\n    solarmy.scale.set(3.6, 3.6, 3.6); //prev 3\r\n\r\n    solarmy.name = \"solarmy\";\r\n\r\n    characterList.push(solarmy);\r\n  });\r\n\r\n  gltfloader.load(solienModel, function (object) {\r\n    solien = object.scene;\r\n    // console.log('solien loaded');\r\n    const mixer = new THREE.AnimationMixer(solien);\r\n    const action = mixer.clipAction(object.animations[0]);\r\n    action.play();\r\n    mixers.push(mixer);\r\n    selectedObjects.push(solien);\r\n\r\n    textureLoader.load(solienDiffuse, (texture) => {\r\n      texture.flipY = false;\r\n      texture.encoding = THREE.sRGBEncoding;\r\n\r\n      solien.traverse(function (child) {\r\n        if (child.isMesh) {\r\n          child.castShadow = true;\r\n          child.receiveShadow = true;\r\n          child.material.roughness = 0.7;\r\n          child.material.metalness = 0.1;\r\n          child.material.map = texture;\r\n          child.material.needsUpdate = true;\r\n        }\r\n      });\r\n      // child.material.side = THREE.DoubleSide;\r\n      // child.material.dithering = true;\r\n      mLoaded();\r\n    });\r\n\r\n    solien.position.set(-0.5, -1.5, -0.6);  //prev (0, 0.5, -0.6)\r\n    solien.rotation.set(0, Math.PI * 0.25, 0);\r\n    solien.scale.set(2, 2, 2);    //prev (1.6, 1.6, 1.6)\r\n    // solien.visible = false;\r\n\r\n    characterList.push(solien);\r\n  });\r\n  gltfloader.load(sunkModel, function (object) {\r\n    sunk = object.scene;\r\n    // console.log('sunk loaded');\r\n    const mixer = new THREE.AnimationMixer(sunk);\r\n    const action = mixer.clipAction(object.animations[0]);\r\n    action.play();\r\n    mixers.push(mixer);\r\n    selectedObjects.push(sunk);\r\n    \r\n    const sunkLoadManager = new THREE.LoadingManager();\r\n    const sunkTexLoader1 = new THREE.TextureLoader(sunkLoadManager);\r\n    const sunkTexLoader2 = new THREE.TextureLoader(sunkLoadManager);\r\n    var sunkRoughnessTexture, sunkDiffuseTexture;\r\n\r\n    sunkTexLoader1.load(Sunk_metalroughness_texture, (texture) => {\r\n      texture.flipY = false;\r\n      texture.encoding = THREE.sRGBEncoding;\r\n      texture.needsUpdate = true;\r\n      sunkRoughnessTexture = texture;\r\n    })\r\n\r\n    sunkTexLoader2.load(sunkDiffuse, (texture) => {\r\n      texture.flipY = false;\r\n      texture.encoding = THREE.sRGBEncoding;\r\n      texture.needsUpdate = true;\r\n      sunkDiffuseTexture = texture;\r\n    })\r\n\r\n    sunkLoadManager.onLoad= () => {\r\n\r\n      sunk.traverse(function (child) {\r\n        if(child.isMesh){\r\n          child.material.roughness = 0.9;\r\n          child.material.metalness = 0.7;\r\n\r\n          child.material.metalnessMap = sunkRoughnessTexture;\r\n          child.material.roughnessMap = sunkRoughnessTexture;\r\n          child.material.map = sunkDiffuseTexture;\r\n          child.material.needsUpdate = true;\r\n\r\n          // textureLoader.load(Sunk_metalroughness_texture, (texture) => {\r\n          //   texture.flipY = false;\r\n          //   texture.needsUpdate = true;\r\n          //   child.material.metalnessMap = texture;\r\n          //   child.material.roughnessMap = texture;\r\n          //   child.material.needsUpdate = true;\r\n          // });\r\n          // textureLoader.load(sunkDiffuse, (texture) => {\r\n          //   texture.flipY = false;\r\n          //   texture.encoding = THREE.sRGBEncoding;\r\n          //   child.material.map = texture;\r\n          //   child.material.needsUpdate = true;\r\n          // })\r\n        }\r\n      });\r\n\r\n      mLoaded();\r\n    }\r\n\r\n\r\n    // sunk.rotation.set(0, -50, 0);\r\n    sunk.rotation.set(THREE.MathUtils.degToRad(5), Math.PI * 0.1, 0);\r\n    sunk.position.set( -0.5, -2.7, -1.2);   //prev (0,-0.5,-1)\r\n    const scale = 1.2;  //1.2\r\n    sunk.scale.set(scale, scale, scale);    //prev (1.2, 1.2, 1.2)\r\n    // sunk.visible = false;\r\n\r\n    characterList.push(sunk);\r\n  });\r\n  \r\n  gltfloader.load(solarianModel, function (object) {\r\n    solarian = object.scene;\r\n    const mixer = new THREE.AnimationMixer(solarian);\r\n    const action = mixer.clipAction(object.animations[0]);\r\n    action.play();\r\n    mixers.push(mixer);\r\n    selectedObjects.push(solarian);\r\n    // console.log('solarian loaded');\r\n\r\n    var diffuseMap;\r\n    textureLoader.load(solarianDiffuse, (texture) => {\r\n      texture.flipY = false;\r\n      texture.encoding = THREE.sRGBEncoding;\r\n      texture.needsUpdate = true;\r\n      diffuseMap = texture;\r\n      solarian.traverse(function (child) {\r\n        if (child.isMesh) {\r\n          child.castShadow = true;\r\n          child.receiveShadow = true;\r\n          child.material.map = diffuseMap;\r\n          child.material.roughness = 0.4;\r\n          child.material.metalness = 0.2;\r\n          child.material.needsUpdate = true;\r\n          // textureLoader.load(solarian_texture, (texture) => {\r\n          //   child.material.map = texture;\r\n          //   child.material.needsUpdate = true;\r\n          // });\r\n        }\r\n      });\r\n      mLoaded();\r\n    })\r\n\r\n\r\n    // solarian.rotation.set(0, -50, 0);\r\n    solarian.rotation.set(0, 0.5, 0);   //prev (0, 0.5, 0)\r\n    solarian.position.x = -0.25;\r\n    solarian.position.y = -0.5;  //prev 0.7\r\n    solarian.scale.set(1.8, 1.8, 1.8);  //prev (2,2,2)\r\n    // solarian.visible = false;\r\n\r\n    characterList.push(solarian);\r\n  });\r\n}\r\nfunction mLoaded(){\r\n  loadedCount++;\r\n  if(loadedCount >= characterCount){\r\n    renderer.domElement.style.display = \"block\";\r\n    modelsLoaded = true;\r\n    console.log(\"All characters loaded\");\r\n    // setTimeout(() => {\r\n\r\n    //   console.log(\"Timeout completed\");\r\n    // }, 10000);\r\n    // // composer.render();\r\n  }\r\n}\r\nsetupScene();\r\n// function sleep(milliseconds) {\r\n//   const date = Date.now();\r\n//   let currentDate = null;\r\n//   do {\r\n//     currentDate = Date.now();\r\n//   } while (currentDate - date < milliseconds);\r\n// }\r\n// console.log(\"before sleep\");\r\n// sleep(10000);\r\n// console.log(\"after sleep\");\r\n\r\nfunction Characters() {\r\n  const character = useSelector((state) => state.characterSelect.character);\r\n  const ref = useRef();\r\n  \r\n  useEffect(() => {\r\n    const current = ref.current;\r\n    let width = current.clientWidth; // or window.innerWidth;\r\n    let height = current.clientHeight; // = window.innerHeight for full screen\r\n\r\n    const init = () => {\r\n      camera = new THREE.PerspectiveCamera(90, width/ height, 1, 100000);\r\n      camera.position.set(0, 2.5, 4);\r\n      renderer.setSize(width, height);\r\n      current.appendChild(renderer.domElement);\r\n\r\n      setupPostProcessing(width, height);\r\n\r\n      if(modelsLoaded === false)\r\n        return;\r\n\r\n      if (character === 0) {\r\n        scene.add(rumbler);\r\n        scene.remove(solarmy);\r\n        scene.remove(solien);\r\n        scene.remove(sunk);\r\n        scene.remove(solarian);\r\n      }\r\n      if (character === 1) {\r\n        scene.remove(rumbler);\r\n        scene.add(solarmy);\r\n        scene.remove(solien);\r\n        scene.remove(sunk);\r\n        scene.remove(solarian);\r\n      }\r\n      if (character === 2) {\r\n        scene.remove(rumbler);\r\n        scene.remove(solarmy);\r\n        scene.add(solien);\r\n        scene.remove(sunk);\r\n        scene.remove(solarian);\r\n      }\r\n      if (character === 3) {\r\n        scene.remove(rumbler);\r\n        scene.remove(solarmy);\r\n        scene.remove(solien);\r\n        scene.add(sunk);\r\n        scene.remove(solarian);\r\n      }\r\n      if (character === 4) {\r\n        scene.remove(rumbler);\r\n        scene.remove(solarmy);\r\n        scene.remove(solien);\r\n        scene.remove(sunk);\r\n        scene.add(solarian);\r\n      }\r\n    };\r\n\r\n    init();\r\n\r\n    manager.onLoad = () => {\r\n      console.log(\"Calling Render\");\r\n      animate();\r\n    };\r\n\r\n    // animate\r\n    const animate = function () {\r\n      requestAnimationFrame(animate);\r\n      // characterChange();\r\n\r\n      if(isScrolledIntoView(doc) && modelsLoaded){\r\n        const delta = clock.getDelta();\r\n        for (let i = 0; i < mixers.length; i++) {\r\n          mixers[i].update(delta);\r\n        }\r\n        render();\r\n      }\r\n      else if(firstFrameRendered === false){\r\n        const delta = clock.getDelta();\r\n        for (let i = 0; i < mixers.length; i++) {\r\n          mixers[i].update(delta);\r\n        }\r\n        render();\r\n      }\r\n    };\r\n\r\n    const doc = document.getElementById('character_model');\r\n\r\n    function isScrolledIntoView(el) {\r\n      var rect = el.getBoundingClientRect();\r\n      var elemTop = rect.top;\r\n      var elemBottom = rect.bottom;\r\n      var isVisible = elemTop < window.innerHeight && elemBottom >= 0;\r\n      return isVisible;\r\n    }\r\n\r\n    const render = () => {\r\n      //renderer.render(scene, camera);\r\n       composer.render();\r\n      if(!firstFrameRendered){\r\n        firstFrameRendered = true;\r\n        console.log(\"First frame rendered\");\r\n      }\r\n    };\r\n\r\n    const handleResize = () => {\r\n      width = ref.current.clientWidth;\r\n      height = ref.current.clientHeight;\r\n      // height = 500;\r\n      renderer.setSize(width, height);\r\n      camera.aspect = width / height;\r\n      camera.updateProjectionMatrix();\r\n      render();\r\n    };\r\n    //#region Old props code\r\n    // props.store.subscribe((data) => {\r\n    //   console.log(data.characterSelect.character);\r\n    //   if (currentCharIndex === data.characterSelect.character) {\r\n    //     console.log(\"Same character\");\r\n    //     return;\r\n    //   }\r\n\r\n    //   for (let i = 0; i < characterList.length; i++) {\r\n    //     characterList[i].visible = false;\r\n    //     if (i === data.characterSelect.character) {\r\n    //       console.log(\"Change character!\");\r\n    //       characterList[i].visible = true;\r\n    //       currentCharIndex = i;\r\n    //     }\r\n    //   }\r\n    // });\r\n\r\n    // const characterChange = () => {\r\n    //   console.log(character.character);\r\n    //   if (currentCharIndex === character.character) {\r\n    //     console.log(\"Same character\");\r\n    //     return;\r\n    //   }\r\n    //   for (let i = 0; i < characterList.length; i++) {\r\n    //     characterList[i].visible = false;\r\n    //     if (i === character.character) {\r\n    //       console.log(\"Change character!\");\r\n    //       characterList[i].visible = true;\r\n    //       currentCharIndex = i;\r\n    //     }\r\n    //   }\r\n    // };\r\n    //#endregion\r\n    \r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    return () => {\r\n      // Callback to cleanup three js, cancel animationFrame, etc\r\n\r\n      window.removeEventListener(\"resize\", handleResize);\r\n      current.removeChild(renderer.domElement);\r\n    };\r\n  }, [character]);\r\n \r\n  // console.log(\"returned character\");\r\n  return <div ref={ref} className=\"Characters\"></div>;\r\n}\r\n\r\nexport default Characters;\r\n"],"mappings":";;AAAA,SAASA,MAAM,EAAEC,SAAS,QAAQ,OAAO;AACzC,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B;AACA,SAASC,UAAU,QAAQ,0CAA0C;AAErE,OAAOC,YAAY,MAAM,2CAA2C;AACpE,OAAOC,cAAc,MAAM,wDAAwD;AAEnF,OAAOC,WAAW,MAAM,0CAA0C;AAClE,OAAOC,aAAa,MAAM,uDAAuD;AAEjF,OAAOC,SAAS,MAAM,wCAAwC;AAC9D,OAAOC,WAAW,MAAM,qDAAqD;AAC7E;AACA;AACA;AACA;AACA,OAAOC,YAAY,MAAM,2CAA2C,CAAC,CAAC;;AAEtE,OAAOC,aAAa,MAAM,4CAA4C,CAAC,CAAE;AACzE,OAAOC,eAAe,MAAM,yDAAyD;AAErF,SAASC,cAAc,QAAQ,qDAAqD;AACpF,SAASC,UAAU,QAAQ,iDAAiD;AAC5E,SAASC,WAAW,QAAQ,kDAAkD;AAC9E;AACA;;AAEA;AACA,OAAOC,8BAA8B,MAAM,kDAAkD;AAC7F,OAAOC,2BAA2B,MAAM,gDAAgD;AACxF;AACA;AACA,OAAO,mBAAmB;AAC1B,SAASC,WAAW,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,IAAIC,MAAM,GAAG,EAAE;AACf,IAAIC,MAAM;AACV,MAAMC,OAAO,GAAG,IAAIrB,KAAK,CAACsB,cAAc,CAAC,CAAC;AAC1C;AACA;AACA,MAAMC,UAAU,GAAG,IAAItB,UAAU,CAACoB,OAAO,CAAC;AAC1C,MAAMG,aAAa,GAAG,IAAIxB,KAAK,CAACyB,aAAa,CAACJ,OAAO,CAAC;AAEtD,MAAMK,KAAK,GAAG,IAAI1B,KAAK,CAAC2B,KAAK,CAAC,CAAC;AAE/B,MAAMC,QAAQ,GAAG,IAAI5B,KAAK,CAAC6B,aAAa,CAAC;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AACzDF,QAAQ,CAACG,aAAa,CAAC,QAAQ,EAAE,CAAC,CAAC;AAEnC,IAAIC,QAAQ;AACZ,IAAIC,eAAe,GAAI,EAAE;AAEzB,IAAIC,KAAK;AACT,IAAIC,aAAa,GAAG,EAAE;AACtB,IAAIC,OAAO,EAAEC,MAAM,EAAEC,IAAI,EAAEC,OAAO,EAAEC,QAAQ;AAE5C,IAAIC,oBAAoB,GAAG,KAAK;AAChC,MAAMC,cAAc,GAAG,CAAC;AACxB,IAAIC,WAAW,GAAG,CAAC;AACnB,IAAIC,YAAY,GAAG,KAAK;AACxB,OAAO,IAAIC,kBAAkB,GAAG,KAAK;AAErC,SAASC,UAAUA,CAAA,EAAE;EACnBZ,KAAK,GAAG,IAAIlC,KAAK,CAAC+C,KAAK,CAAC,CAAC;;EAEvB;EACF;EACAnB,QAAQ,CAACoB,WAAW,GAAGhD,KAAK,CAACiD,mBAAmB;EAChDrB,QAAQ,CAACsB,mBAAmB,GAAG,CAAC;EAChCtB,QAAQ,CAACuB,SAAS,CAACC,OAAO,GAAG,IAAI;EACjC;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACAlB,KAAK,CAACmB,GAAG,GAAG,IAAIrD,KAAK,CAACsD,GAAG,CAACpB,KAAK,CAACqB,UAAU,EAAE,CAAC,EAAE,KAAK,CAAC;EACrD,MAAMC,SAAS,GAAG,IAAIxD,KAAK,CAACyD,eAAe,CAAC,QAAQ,EAAE,QAAQ,EAAE,CAAC,CAAC;EAClED,SAAS,CAACE,QAAQ,CAACC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAC/BH,SAAS,CAACE,QAAQ,CAACE,cAAc,CAAC,OAAO,CAAC;EAC1C;EACA;EACA;EACA;;EAEA,MAAMC,QAAQ,GAAG,IAAI7D,KAAK,CAAC8D,gBAAgB,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,CAAG;EAC7DD,QAAQ,CAACE,KAAK,CAACC,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,IAAI,CAAC;EACnCH,QAAQ,CAACH,QAAQ,CAACE,cAAc,CAAC,EAAE,CAAC;EACpC,MAAMK,CAAC,GAAG,GAAG;EACbJ,QAAQ,CAACH,QAAQ,CAACC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAG;EACnCE,QAAQ,CAACH,QAAQ,CAACE,cAAc,CAAC,IAAI,CAAC;EACtCC,QAAQ,CAACK,UAAU,GAAG,IAAI;EAC1BL,QAAQ,CAACM,MAAM,CAAC/C,MAAM,CAACgD,GAAG,GAAGH,CAAC;EAC9BJ,QAAQ,CAACM,MAAM,CAAC/C,MAAM,CAACiD,MAAM,GAAG,CAACJ,CAAC;EAClCJ,QAAQ,CAACM,MAAM,CAAC/C,MAAM,CAACkD,IAAI,GAAG,CAACL,CAAC;EAChCJ,QAAQ,CAACM,MAAM,CAAC/C,MAAM,CAACmD,KAAK,GAAGN,CAAC;EAChC;EACA;EACAJ,QAAQ,CAACM,MAAM,CAAC/C,MAAM,CAACoD,GAAG,GAAG,KAAK;EAClCX,QAAQ,CAACM,MAAM,CAACM,IAAI,GAAG,CAAC,MAAM;EAC9BvC,KAAK,CAACwC,GAAG,CAACb,QAAQ,CAAC;EAEnB,MAAMc,SAAS,GAAG,IAAI3E,KAAK,CAAC4E,SAAS,CAAE,QAAS,CAAC;EACjDD,SAAS,CAACjB,QAAQ,CAACC,GAAG,CAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAE,CAAC;EACrC;;EAEA;EACA;EACA;EACA;;EAEA,MAAMkB,YAAY,GAAG,EAAE,CAAC,CAAG;EAC3B,MAAMC,aAAa,GAAG,IAAI9E,KAAK,CAAC+E,UAAU,CAAE,QAAQ,EAAEF,YAAY,EAAE,EAAE,CAAC;EACvEC,aAAa,CAACpB,QAAQ,CAACC,GAAG,CAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;EACrCzB,KAAK,CAACwC,GAAG,CAAEI,aAAc,CAAC;EAE1B,MAAME,YAAY,GAAG,IAAIhF,KAAK,CAACiF,YAAY,CAAE,QAAQ,EAAE,CAAE,CAAC,CAAC,CAAC;EAC5D/C,KAAK,CAACwC,GAAG,CAAEM,YAAa,CAAC;EAEzBpD,QAAQ,CAACsD,UAAU,CAACC,KAAK,CAACC,OAAO,GAAG,MAAM;EAC1C;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAC,UAAU,CAAC,CAAC;AACd;AAEA,SAASC,mBAAmBA,CAACC,KAAK,EAAEC,MAAM,EAAC;EACzC,IAAG/C,oBAAoB,EAAC;IACtB;EACF;EAEA,MAAMgD,MAAM,GAAG;IACbC,YAAY,EAAE,GAAG;IAAG;IACpBC,QAAQ,EAAE,GAAG;IAAG;IAChBC,aAAa,EAAE,GAAG;IAAE;IACpBC,WAAW,EAAE,CAAC;IACdC,MAAM,EAAE,KAAK;IACbC,iBAAiB,EAAE;EACrB,CAAC;EAED/D,QAAQ,GAAG,IAAIrB,cAAc,CAAEiB,QAAS,CAAC;EAE1C,MAAMoE,UAAU,GAAG,IAAIpF,UAAU,CAAEsB,KAAK,EAAEd,MAAO,CAAC;EAClDY,QAAQ,CAACiE,OAAO,CAAED,UAAW,CAAC;EAE9B,MAAME,WAAW,GAAG,IAAIrF,WAAW,CAAE,IAAIb,KAAK,CAACmG,OAAO,CAAEZ,KAAK,EAAEC,MAAO,CAAC,EAAEtD,KAAK,EAAEd,MAAO,CAAC;EACvF8E,WAAW,CAACR,YAAY,GAAGD,MAAM,CAACC,YAAY;EAC9CQ,WAAW,CAACP,QAAQ,GAAGF,MAAM,CAACE,QAAQ;EACtCO,WAAW,CAACN,aAAa,GAAGH,MAAM,CAACG,aAAa;EAChDM,WAAW,CAACE,gBAAgB,CAACzC,GAAG,CAAC,QAAQ,CAAC;EAC1CuC,WAAW,CAACG,eAAe,CAAC1C,GAAG,CAAC,QAAQ,CAAC;EACzCuC,WAAW,CAACjE,eAAe,GAAGA,eAAe;EAC9CD,QAAQ,CAACiE,OAAO,CAAEC,WAAY,CAAC;EAE9BzD,oBAAoB,GAAG,IAAI;AAC7B;AAEA,SAAS4C,UAAUA,CAAA,EAAE;EAEnB9D,UAAU,CAAC+E,IAAI,CAAC9F,YAAY,EAAE,UAAU+F,MAAM,EAAE;IAC9ChE,OAAO,GAAGgE,MAAM,CAACrE,KAAK;IACtB;IACA,MAAMsE,KAAK,GAAG,IAAIxG,KAAK,CAACyG,cAAc,CAAClE,OAAO,CAAC;IAC/C,MAAMmE,MAAM,GAAGF,KAAK,CAACG,UAAU,CAACJ,MAAM,CAACK,UAAU,CAAC,CAAC,CAAC,CAAC;IACrDF,MAAM,CAACG,IAAI,CAAC,CAAC;IACb1F,MAAM,CAAC2F,IAAI,CAACN,KAAK,CAAC;IAClBvE,eAAe,CAAC6E,IAAI,CAACvE,OAAO,CAAC;IAE7BA,OAAO,CAACwE,QAAQ,CAAEC,KAAK,IAAK;MAC1B,IAAGA,KAAK,CAACC,MAAM,EAAC;QACdD,KAAK,CAAC9C,UAAU,GAAG,IAAI;QACvB8C,KAAK,CAACE,aAAa,GAAG,IAAI;MAC5B;IACF,CAAC,CAAC;IACF;IACA;IACA;IACA;;IAEA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA3E,OAAO,CAACmB,QAAQ,CAACyD,CAAC,GAAG,CAAC,GAAG;IACzB5E,OAAO,CAACmB,QAAQ,CAAC0D,CAAC,GAAG,CAAC,IAAI;IAC1B7E,OAAO,CAAC8E,QAAQ,CAACD,CAAC,GAAG,GAAG;IACxB7E,OAAO,CAAC+E,KAAK,CAAC3D,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAE;IAChC;;IAEAzB,KAAK,CAACwC,GAAG,CAACnC,OAAO,CAAC;IAClBJ,aAAa,CAAC2E,IAAI,CAACvE,OAAO,CAAC;IAC3BgF,OAAO,CAAC,CAAC;EACX,CAAC,CAAC;EAEFC,mBAAmB,CAAC,CAAC;AACvB;AAACC,EAAA,GA9DQpC,UAAU;AA+DnB,SAASmC,mBAAmBA,CAAA,EAAE;EAE5BjG,UAAU,CAAC+E,IAAI,CAACpG,YAAY,EAAE,UAAUqG,MAAM,EAAE;IAC9CnE,OAAO,GAAGmE,MAAM,CAACrE,KAAK;IACtB;IACA,MAAMsE,KAAK,GAAG,IAAIxG,KAAK,CAACyG,cAAc,CAACrE,OAAO,CAAC;IAC/C,MAAMsE,MAAM,GAAGF,KAAK,CAACG,UAAU,CAACJ,MAAM,CAACK,UAAU,CAAC,CAAC,CAAC,CAAC;IACrDzF,MAAM,CAAC2F,IAAI,CAACN,KAAK,CAAC;IAClBE,MAAM,CAACG,IAAI,CAAC,CAAC;IACb5E,eAAe,CAAC6E,IAAI,CAAC1E,OAAO,CAAC;IAE7B,MAAMsF,kBAAkB,GAAG,IAAI1H,KAAK,CAACsB,cAAc,CAAC,CAAC;IACrD,MAAMqG,gBAAgB,GAAG,IAAI3H,KAAK,CAACyB,aAAa,CAACiG,kBAAkB,CAAC;IACpE;IACA,IAAIE,cAAc,EAAEC,iBAAiB;IAErCF,gBAAgB,CAACrB,IAAI,CAACxF,8BAA8B,EAAGgH,OAAO,IAAK;MACjEA,OAAO,CAACC,KAAK,GAAG,KAAK;MACrBD,OAAO,CAACE,WAAW,GAAG,IAAI;MAC1BH,iBAAiB,GAAGC,OAAO;IAC7B,CAAC,CAAC;IAEFH,gBAAgB,CAACrB,IAAI,CAACnG,cAAc,EAAG2H,OAAO,IAAK;MACjDA,OAAO,CAACC,KAAK,GAAG,KAAK;MACrBD,OAAO,CAACG,QAAQ,GAAGjI,KAAK,CAACkI,YAAY;MACrCJ,OAAO,CAACE,WAAW,GAAG,IAAI;MAC1BJ,cAAc,GAAGE,OAAO;IAC1B,CAAC,CAAC;IAEFJ,kBAAkB,CAACS,MAAM,GAAG,MAAM;MAEhC/F,OAAO,CAAC2E,QAAQ,CAAC,UAAUC,KAAK,EAAE;QAChC,IAAIA,KAAK,CAACC,MAAM,EAAE;UAChBD,KAAK,CAAC9C,UAAU,GAAG,IAAI;UACvB8C,KAAK,CAACE,aAAa,GAAG,IAAI;UAC1B;UACAF,KAAK,CAACoB,QAAQ,CAACC,SAAS,GAAG,GAAG;UAC9BrB,KAAK,CAACoB,QAAQ,CAACE,SAAS,GAAG,CAAC;UAC5BtB,KAAK,CAACoB,QAAQ,CAACG,YAAY,GAAGV,iBAAiB;UAC/Cb,KAAK,CAACoB,QAAQ,CAACI,YAAY,GAAGX,iBAAiB;UAC/Cb,KAAK,CAACoB,QAAQ,CAACK,GAAG,GAAGb,cAAc;UACnCZ,KAAK,CAACoB,QAAQ,CAACJ,WAAW,GAAG,IAAI;;UAEjC;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;QACF;MACF,CAAC,CAAC;MAEFT,OAAO,CAAC,CAAC;IACX,CAAC;IAGDnF,OAAO,CAACsB,QAAQ,CAACC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;IAEnCvB,OAAO,CAACiF,QAAQ,CAAC1D,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAC7BvB,OAAO,CAACkF,KAAK,CAAC3D,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;;IAElCvB,OAAO,CAACsG,IAAI,GAAG,SAAS;IAExBvG,aAAa,CAAC2E,IAAI,CAAC1E,OAAO,CAAC;EAC7B,CAAC,CAAC;EAEFb,UAAU,CAAC+E,IAAI,CAAClG,WAAW,EAAE,UAAUmG,MAAM,EAAE;IAC7ClE,MAAM,GAAGkE,MAAM,CAACrE,KAAK;IACrB;IACA,MAAMsE,KAAK,GAAG,IAAIxG,KAAK,CAACyG,cAAc,CAACpE,MAAM,CAAC;IAC9C,MAAMqE,MAAM,GAAGF,KAAK,CAACG,UAAU,CAACJ,MAAM,CAACK,UAAU,CAAC,CAAC,CAAC,CAAC;IACrDF,MAAM,CAACG,IAAI,CAAC,CAAC;IACb1F,MAAM,CAAC2F,IAAI,CAACN,KAAK,CAAC;IAClBvE,eAAe,CAAC6E,IAAI,CAACzE,MAAM,CAAC;IAE5Bb,aAAa,CAAC8E,IAAI,CAACjG,aAAa,EAAGyH,OAAO,IAAK;MAC7CA,OAAO,CAACC,KAAK,GAAG,KAAK;MACrBD,OAAO,CAACG,QAAQ,GAAGjI,KAAK,CAACkI,YAAY;MAErC7F,MAAM,CAAC0E,QAAQ,CAAC,UAAUC,KAAK,EAAE;QAC/B,IAAIA,KAAK,CAACC,MAAM,EAAE;UAChBD,KAAK,CAAC9C,UAAU,GAAG,IAAI;UACvB8C,KAAK,CAACE,aAAa,GAAG,IAAI;UAC1BF,KAAK,CAACoB,QAAQ,CAACC,SAAS,GAAG,GAAG;UAC9BrB,KAAK,CAACoB,QAAQ,CAACE,SAAS,GAAG,GAAG;UAC9BtB,KAAK,CAACoB,QAAQ,CAACK,GAAG,GAAGX,OAAO;UAC5Bd,KAAK,CAACoB,QAAQ,CAACJ,WAAW,GAAG,IAAI;QACnC;MACF,CAAC,CAAC;MACF;MACA;MACAT,OAAO,CAAC,CAAC;IACX,CAAC,CAAC;IAEFlF,MAAM,CAACqB,QAAQ,CAACC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,CAAE;IACxCtB,MAAM,CAACgF,QAAQ,CAAC1D,GAAG,CAAC,CAAC,EAAEgF,IAAI,CAACC,EAAE,GAAG,IAAI,EAAE,CAAC,CAAC;IACzCvG,MAAM,CAACiF,KAAK,CAAC3D,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAI;IAC9B;;IAEAxB,aAAa,CAAC2E,IAAI,CAACzE,MAAM,CAAC;EAC5B,CAAC,CAAC;EACFd,UAAU,CAAC+E,IAAI,CAAChG,SAAS,EAAE,UAAUiG,MAAM,EAAE;IAC3CjE,IAAI,GAAGiE,MAAM,CAACrE,KAAK;IACnB;IACA,MAAMsE,KAAK,GAAG,IAAIxG,KAAK,CAACyG,cAAc,CAACnE,IAAI,CAAC;IAC5C,MAAMoE,MAAM,GAAGF,KAAK,CAACG,UAAU,CAACJ,MAAM,CAACK,UAAU,CAAC,CAAC,CAAC,CAAC;IACrDF,MAAM,CAACG,IAAI,CAAC,CAAC;IACb1F,MAAM,CAAC2F,IAAI,CAACN,KAAK,CAAC;IAClBvE,eAAe,CAAC6E,IAAI,CAACxE,IAAI,CAAC;IAE1B,MAAMuG,eAAe,GAAG,IAAI7I,KAAK,CAACsB,cAAc,CAAC,CAAC;IAClD,MAAMwH,cAAc,GAAG,IAAI9I,KAAK,CAACyB,aAAa,CAACoH,eAAe,CAAC;IAC/D,MAAME,cAAc,GAAG,IAAI/I,KAAK,CAACyB,aAAa,CAACoH,eAAe,CAAC;IAC/D,IAAIG,oBAAoB,EAAEC,kBAAkB;IAE5CH,cAAc,CAACxC,IAAI,CAACvF,2BAA2B,EAAG+G,OAAO,IAAK;MAC5DA,OAAO,CAACC,KAAK,GAAG,KAAK;MACrBD,OAAO,CAACG,QAAQ,GAAGjI,KAAK,CAACkI,YAAY;MACrCJ,OAAO,CAACE,WAAW,GAAG,IAAI;MAC1BgB,oBAAoB,GAAGlB,OAAO;IAChC,CAAC,CAAC;IAEFiB,cAAc,CAACzC,IAAI,CAAC/F,WAAW,EAAGuH,OAAO,IAAK;MAC5CA,OAAO,CAACC,KAAK,GAAG,KAAK;MACrBD,OAAO,CAACG,QAAQ,GAAGjI,KAAK,CAACkI,YAAY;MACrCJ,OAAO,CAACE,WAAW,GAAG,IAAI;MAC1BiB,kBAAkB,GAAGnB,OAAO;IAC9B,CAAC,CAAC;IAEFe,eAAe,CAACV,MAAM,GAAE,MAAM;MAE5B7F,IAAI,CAACyE,QAAQ,CAAC,UAAUC,KAAK,EAAE;QAC7B,IAAGA,KAAK,CAACC,MAAM,EAAC;UACdD,KAAK,CAACoB,QAAQ,CAACC,SAAS,GAAG,GAAG;UAC9BrB,KAAK,CAACoB,QAAQ,CAACE,SAAS,GAAG,GAAG;UAE9BtB,KAAK,CAACoB,QAAQ,CAACG,YAAY,GAAGS,oBAAoB;UAClDhC,KAAK,CAACoB,QAAQ,CAACI,YAAY,GAAGQ,oBAAoB;UAClDhC,KAAK,CAACoB,QAAQ,CAACK,GAAG,GAAGQ,kBAAkB;UACvCjC,KAAK,CAACoB,QAAQ,CAACJ,WAAW,GAAG,IAAI;;UAEjC;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;QACF;MACF,CAAC,CAAC;MAEFT,OAAO,CAAC,CAAC;IACX,CAAC;;IAGD;IACAjF,IAAI,CAAC+E,QAAQ,CAAC1D,GAAG,CAAC3D,KAAK,CAACkJ,SAAS,CAACC,QAAQ,CAAC,CAAC,CAAC,EAAER,IAAI,CAACC,EAAE,GAAG,GAAG,EAAE,CAAC,CAAC;IAChEtG,IAAI,CAACoB,QAAQ,CAACC,GAAG,CAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,CAAG;IACxC,MAAM2D,KAAK,GAAG,GAAG,CAAC,CAAE;IACpBhF,IAAI,CAACgF,KAAK,CAAC3D,GAAG,CAAC2D,KAAK,EAAEA,KAAK,EAAEA,KAAK,CAAC,CAAC,CAAI;IACxC;;IAEAnF,aAAa,CAAC2E,IAAI,CAACxE,IAAI,CAAC;EAC1B,CAAC,CAAC;EAEFf,UAAU,CAAC+E,IAAI,CAAC7F,aAAa,EAAE,UAAU8F,MAAM,EAAE;IAC/C/D,QAAQ,GAAG+D,MAAM,CAACrE,KAAK;IACvB,MAAMsE,KAAK,GAAG,IAAIxG,KAAK,CAACyG,cAAc,CAACjE,QAAQ,CAAC;IAChD,MAAMkE,MAAM,GAAGF,KAAK,CAACG,UAAU,CAACJ,MAAM,CAACK,UAAU,CAAC,CAAC,CAAC,CAAC;IACrDF,MAAM,CAACG,IAAI,CAAC,CAAC;IACb1F,MAAM,CAAC2F,IAAI,CAACN,KAAK,CAAC;IAClBvE,eAAe,CAAC6E,IAAI,CAACtE,QAAQ,CAAC;IAC9B;;IAEA,IAAI4G,UAAU;IACd5H,aAAa,CAAC8E,IAAI,CAAC5F,eAAe,EAAGoH,OAAO,IAAK;MAC/CA,OAAO,CAACC,KAAK,GAAG,KAAK;MACrBD,OAAO,CAACG,QAAQ,GAAGjI,KAAK,CAACkI,YAAY;MACrCJ,OAAO,CAACE,WAAW,GAAG,IAAI;MAC1BoB,UAAU,GAAGtB,OAAO;MACpBtF,QAAQ,CAACuE,QAAQ,CAAC,UAAUC,KAAK,EAAE;QACjC,IAAIA,KAAK,CAACC,MAAM,EAAE;UAChBD,KAAK,CAAC9C,UAAU,GAAG,IAAI;UACvB8C,KAAK,CAACE,aAAa,GAAG,IAAI;UAC1BF,KAAK,CAACoB,QAAQ,CAACK,GAAG,GAAGW,UAAU;UAC/BpC,KAAK,CAACoB,QAAQ,CAACC,SAAS,GAAG,GAAG;UAC9BrB,KAAK,CAACoB,QAAQ,CAACE,SAAS,GAAG,GAAG;UAC9BtB,KAAK,CAACoB,QAAQ,CAACJ,WAAW,GAAG,IAAI;UACjC;UACA;UACA;UACA;QACF;MACF,CAAC,CAAC;MACFT,OAAO,CAAC,CAAC;IACX,CAAC,CAAC;;IAGF;IACA/E,QAAQ,CAAC6E,QAAQ,CAAC1D,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,CAAG;IACpCnB,QAAQ,CAACkB,QAAQ,CAACyD,CAAC,GAAG,CAAC,IAAI;IAC3B3E,QAAQ,CAACkB,QAAQ,CAAC0D,CAAC,GAAG,CAAC,GAAG,CAAC,CAAE;IAC7B5E,QAAQ,CAAC8E,KAAK,CAAC3D,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAE;IACpC;;IAEAxB,aAAa,CAAC2E,IAAI,CAACtE,QAAQ,CAAC;EAC9B,CAAC,CAAC;AACJ;AAAC6G,GAAA,GA7NQ7B,mBAAmB;AA8N5B,SAASD,OAAOA,CAAA,EAAE;EAChB5E,WAAW,EAAE;EACb,IAAGA,WAAW,IAAID,cAAc,EAAC;IAC/Bd,QAAQ,CAACsD,UAAU,CAACC,KAAK,CAACC,OAAO,GAAG,OAAO;IAC3CxC,YAAY,GAAG,IAAI;IACnB0G,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;IACpC;;IAEA;IACA;IACA;EACF;AACF;AACAzG,UAAU,CAAC,CAAC;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAS0G,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAMC,SAAS,GAAG1I,WAAW,CAAE2I,KAAK,IAAKA,KAAK,CAACC,eAAe,CAACF,SAAS,CAAC;EACzE,MAAMG,GAAG,GAAG/J,MAAM,CAAC,CAAC;EAEpBC,SAAS,CAAC,MAAM;IACd,MAAM+J,OAAO,GAAGD,GAAG,CAACC,OAAO;IAC3B,IAAIvE,KAAK,GAAGuE,OAAO,CAACC,WAAW,CAAC,CAAC;IACjC,IAAIvE,MAAM,GAAGsE,OAAO,CAACE,YAAY,CAAC,CAAC;;IAEnC,MAAMC,IAAI,GAAGA,CAAA,KAAM;MACjB7I,MAAM,GAAG,IAAIpB,KAAK,CAACkK,iBAAiB,CAAC,EAAE,EAAE3E,KAAK,GAAEC,MAAM,EAAE,CAAC,EAAE,MAAM,CAAC;MAClEpE,MAAM,CAACsC,QAAQ,CAACC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;MAC9B/B,QAAQ,CAACuI,OAAO,CAAC5E,KAAK,EAAEC,MAAM,CAAC;MAC/BsE,OAAO,CAACM,WAAW,CAACxI,QAAQ,CAACsD,UAAU,CAAC;MAExCI,mBAAmB,CAACC,KAAK,EAAEC,MAAM,CAAC;MAElC,IAAG5C,YAAY,KAAK,KAAK,EACvB;MAEF,IAAI8G,SAAS,KAAK,CAAC,EAAE;QACnBxH,KAAK,CAACwC,GAAG,CAACnC,OAAO,CAAC;QAClBL,KAAK,CAACmI,MAAM,CAACjI,OAAO,CAAC;QACrBF,KAAK,CAACmI,MAAM,CAAChI,MAAM,CAAC;QACpBH,KAAK,CAACmI,MAAM,CAAC/H,IAAI,CAAC;QAClBJ,KAAK,CAACmI,MAAM,CAAC7H,QAAQ,CAAC;MACxB;MACA,IAAIkH,SAAS,KAAK,CAAC,EAAE;QACnBxH,KAAK,CAACmI,MAAM,CAAC9H,OAAO,CAAC;QACrBL,KAAK,CAACwC,GAAG,CAACtC,OAAO,CAAC;QAClBF,KAAK,CAACmI,MAAM,CAAChI,MAAM,CAAC;QACpBH,KAAK,CAACmI,MAAM,CAAC/H,IAAI,CAAC;QAClBJ,KAAK,CAACmI,MAAM,CAAC7H,QAAQ,CAAC;MACxB;MACA,IAAIkH,SAAS,KAAK,CAAC,EAAE;QACnBxH,KAAK,CAACmI,MAAM,CAAC9H,OAAO,CAAC;QACrBL,KAAK,CAACmI,MAAM,CAACjI,OAAO,CAAC;QACrBF,KAAK,CAACwC,GAAG,CAACrC,MAAM,CAAC;QACjBH,KAAK,CAACmI,MAAM,CAAC/H,IAAI,CAAC;QAClBJ,KAAK,CAACmI,MAAM,CAAC7H,QAAQ,CAAC;MACxB;MACA,IAAIkH,SAAS,KAAK,CAAC,EAAE;QACnBxH,KAAK,CAACmI,MAAM,CAAC9H,OAAO,CAAC;QACrBL,KAAK,CAACmI,MAAM,CAACjI,OAAO,CAAC;QACrBF,KAAK,CAACmI,MAAM,CAAChI,MAAM,CAAC;QACpBH,KAAK,CAACwC,GAAG,CAACpC,IAAI,CAAC;QACfJ,KAAK,CAACmI,MAAM,CAAC7H,QAAQ,CAAC;MACxB;MACA,IAAIkH,SAAS,KAAK,CAAC,EAAE;QACnBxH,KAAK,CAACmI,MAAM,CAAC9H,OAAO,CAAC;QACrBL,KAAK,CAACmI,MAAM,CAACjI,OAAO,CAAC;QACrBF,KAAK,CAACmI,MAAM,CAAChI,MAAM,CAAC;QACpBH,KAAK,CAACmI,MAAM,CAAC/H,IAAI,CAAC;QAClBJ,KAAK,CAACwC,GAAG,CAAClC,QAAQ,CAAC;MACrB;IACF,CAAC;IAEDyH,IAAI,CAAC,CAAC;IAEN5I,OAAO,CAAC8G,MAAM,GAAG,MAAM;MACrBmB,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;MAC7Be,OAAO,CAAC,CAAC;IACX,CAAC;;IAED;IACA,MAAMA,OAAO,GAAG,SAAAA,CAAA,EAAY;MAC1BC,qBAAqB,CAACD,OAAO,CAAC;MAC9B;;MAEA,IAAGE,kBAAkB,CAACC,GAAG,CAAC,IAAI7H,YAAY,EAAC;QACzC,MAAM8H,KAAK,GAAGhJ,KAAK,CAACiJ,QAAQ,CAAC,CAAC;QAC9B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGzJ,MAAM,CAAC0J,MAAM,EAAED,CAAC,EAAE,EAAE;UACtCzJ,MAAM,CAACyJ,CAAC,CAAC,CAACE,MAAM,CAACJ,KAAK,CAAC;QACzB;QACAK,MAAM,CAAC,CAAC;MACV,CAAC,MACI,IAAGlI,kBAAkB,KAAK,KAAK,EAAC;QACnC,MAAM6H,KAAK,GAAGhJ,KAAK,CAACiJ,QAAQ,CAAC,CAAC;QAC9B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGzJ,MAAM,CAAC0J,MAAM,EAAED,CAAC,EAAE,EAAE;UACtCzJ,MAAM,CAACyJ,CAAC,CAAC,CAACE,MAAM,CAACJ,KAAK,CAAC;QACzB;QACAK,MAAM,CAAC,CAAC;MACV;IACF,CAAC;IAED,MAAMN,GAAG,GAAGO,QAAQ,CAACC,cAAc,CAAC,iBAAiB,CAAC;IAEtD,SAAST,kBAAkBA,CAACU,EAAE,EAAE;MAC9B,IAAIC,IAAI,GAAGD,EAAE,CAACE,qBAAqB,CAAC,CAAC;MACrC,IAAIC,OAAO,GAAGF,IAAI,CAAC/G,GAAG;MACtB,IAAIkH,UAAU,GAAGH,IAAI,CAAC9G,MAAM;MAC5B,IAAIkH,SAAS,GAAGF,OAAO,GAAGG,MAAM,CAACC,WAAW,IAAIH,UAAU,IAAI,CAAC;MAC/D,OAAOC,SAAS;IAClB;IAEA,MAAMR,MAAM,GAAGA,CAAA,KAAM;MACnB;MACC/I,QAAQ,CAAC+I,MAAM,CAAC,CAAC;MAClB,IAAG,CAAClI,kBAAkB,EAAC;QACrBA,kBAAkB,GAAG,IAAI;QACzByG,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;MACrC;IACF,CAAC;IAED,MAAMmC,YAAY,GAAGA,CAAA,KAAM;MACzBnG,KAAK,GAAGsE,GAAG,CAACC,OAAO,CAACC,WAAW;MAC/BvE,MAAM,GAAGqE,GAAG,CAACC,OAAO,CAACE,YAAY;MACjC;MACApI,QAAQ,CAACuI,OAAO,CAAC5E,KAAK,EAAEC,MAAM,CAAC;MAC/BpE,MAAM,CAACuK,MAAM,GAAGpG,KAAK,GAAGC,MAAM;MAC9BpE,MAAM,CAACwK,sBAAsB,CAAC,CAAC;MAC/Bb,MAAM,CAAC,CAAC;IACV,CAAC;IACD;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEAS,MAAM,CAACK,gBAAgB,CAAC,QAAQ,EAAEH,YAAY,CAAC;IAE/C,OAAO,MAAM;MACX;;MAEAF,MAAM,CAACM,mBAAmB,CAAC,QAAQ,EAAEJ,YAAY,CAAC;MAClD5B,OAAO,CAACiC,WAAW,CAACnK,QAAQ,CAACsD,UAAU,CAAC;IAC1C,CAAC;EACH,CAAC,EAAE,CAACwE,SAAS,CAAC,CAAC;;EAEf;EACA,oBAAOxI,OAAA;IAAK2I,GAAG,EAAEA,GAAI;IAACmC,SAAS,EAAC;EAAY;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AACrD;AAAC3C,EAAA,CAhKQD,UAAU;EAAA,QACCxI,WAAW;AAAA;AAAAqL,GAAA,GADtB7C,UAAU;AAkKnB,eAAeA,UAAU;AAAC,IAAA/B,EAAA,EAAA4B,GAAA,EAAAgD,GAAA;AAAAC,YAAA,CAAA7E,EAAA;AAAA6E,YAAA,CAAAjD,GAAA;AAAAiD,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}